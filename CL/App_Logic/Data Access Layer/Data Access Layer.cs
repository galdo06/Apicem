
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//		Template updated by: Mohammad Ashraful Alam, Microsoft MVP, ASP.NET [admin@ashraful.net]
//		Modification comment: made few items mockable. (03-30-2010)
//			* Made ObjectSet properties of database context as virtual and return type as IObjectSet
//			* Made stored procedure (function import) methods virtual and return type as List<Entity>
//			* Seperate name space for data containers	
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections.Generic;//custom-code
using Eisk.BusinessEntities;//custom-code

namespace Eisk.DataAccessLayer
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DatabaseContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DatabaseContext object using the connection string found in the 'DatabaseContext' section of the application configuration file.
        /// </summary>
        public DatabaseContext() : base("name=DatabaseContext", "DatabaseContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DatabaseContext object.
        /// </summary>
        public DatabaseContext(string connectionString) : base(connectionString, "DatabaseContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DatabaseContext object.
        /// </summary>
        public DatabaseContext(EntityConnection connection) : base(connection, "DatabaseContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<ActionProposed> ActionProposeds//custom-code for testability
        {
            get
            {
                if ((_ActionProposeds == null))
                {
                    _ActionProposeds = base.CreateObjectSet<ActionProposed>("ActionProposeds");
                }
                return _ActionProposeds;
            }
        }
        private ObjectSet<ActionProposed> _ActionProposeds;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Application_Groups> Application_Groups//custom-code for testability
        {
            get
            {
                if ((_Application_Groups == null))
                {
                    _Application_Groups = base.CreateObjectSet<Application_Groups>("Application_Groups");
                }
                return _Application_Groups;
            }
        }
        private ObjectSet<Application_Groups> _Application_Groups;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Application> Applications//custom-code for testability
        {
            get
            {
                if ((_Applications == null))
                {
                    _Applications = base.CreateObjectSet<Application>("Applications");
                }
                return _Applications;
            }
        }
        private ObjectSet<Application> _Applications;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<City> Cities//custom-code for testability
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Color> Colors//custom-code for testability
        {
            get
            {
                if ((_Colors == null))
                {
                    _Colors = base.CreateObjectSet<Color>("Colors");
                }
                return _Colors;
            }
        }
        private ObjectSet<Color> _Colors;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<CommonName> CommonNames//custom-code for testability
        {
            get
            {
                if ((_CommonNames == null))
                {
                    _CommonNames = base.CreateObjectSet<CommonName>("CommonNames");
                }
                return _CommonNames;
            }
        }
        private ObjectSet<CommonName> _CommonNames;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Condition> Conditions//custom-code for testability
        {
            get
            {
                if ((_Conditions == null))
                {
                    _Conditions = base.CreateObjectSet<Condition>("Conditions");
                }
                return _Conditions;
            }
        }
        private ObjectSet<Condition> _Conditions;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Dap> Daps//custom-code for testability
        {
            get
            {
                if ((_Daps == null))
                {
                    _Daps = base.CreateObjectSet<Dap>("Daps");
                }
                return _Daps;
            }
        }
        private ObjectSet<Dap> _Daps;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Device> Devices//custom-code for testability
        {
            get
            {
                if ((_Devices == null))
                {
                    _Devices = base.CreateObjectSet<Device>("Devices");
                }
                return _Devices;
            }
        }
        private ObjectSet<Device> _Devices;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Group_Projects> Group_Projects//custom-code for testability
        {
            get
            {
                if ((_Group_Projects == null))
                {
                    _Group_Projects = base.CreateObjectSet<Group_Projects>("Group_Projects");
                }
                return _Group_Projects;
            }
        }
        private ObjectSet<Group_Projects> _Group_Projects;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Group_Users> Group_Users//custom-code for testability
        {
            get
            {
                if ((_Group_Users == null))
                {
                    _Group_Users = base.CreateObjectSet<Group_Users>("Group_Users");
                }
                return _Group_Users;
            }
        }
        private ObjectSet<Group_Users> _Group_Users;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Group> Groups//custom-code for testability
        {
            get
            {
                if ((_Groups == null))
                {
                    _Groups = base.CreateObjectSet<Group>("Groups");
                }
                return _Groups;
            }
        }
        private ObjectSet<Group> _Groups;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Notification_User> Notification_User//custom-code for testability
        {
            get
            {
                if ((_Notification_User == null))
                {
                    _Notification_User = base.CreateObjectSet<Notification_User>("Notification_User");
                }
                return _Notification_User;
            }
        }
        private ObjectSet<Notification_User> _Notification_User;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Notification> Notifications//custom-code for testability
        {
            get
            {
                if ((_Notifications == null))
                {
                    _Notifications = base.CreateObjectSet<Notification>("Notifications");
                }
                return _Notifications;
            }
        }
        private ObjectSet<Notification> _Notifications;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Organism> Organisms//custom-code for testability
        {
            get
            {
                if ((_Organisms == null))
                {
                    _Organisms = base.CreateObjectSet<Organism>("Organisms");
                }
                return _Organisms;
            }
        }
        private ObjectSet<Organism> _Organisms;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<OrganismType> OrganismTypes//custom-code for testability
        {
            get
            {
                if ((_OrganismTypes == null))
                {
                    _OrganismTypes = base.CreateObjectSet<OrganismType>("OrganismTypes");
                }
                return _OrganismTypes;
            }
        }
        private ObjectSet<OrganismType> _OrganismTypes;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<PerimeterPoint> PerimeterPoints//custom-code for testability
        {
            get
            {
                if ((_PerimeterPoints == null))
                {
                    _PerimeterPoints = base.CreateObjectSet<PerimeterPoint>("PerimeterPoints");
                }
                return _PerimeterPoints;
            }
        }
        private ObjectSet<PerimeterPoint> _PerimeterPoints;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Perimeter> Perimeters//custom-code for testability
        {
            get
            {
                if ((_Perimeters == null))
                {
                    _Perimeters = base.CreateObjectSet<Perimeter>("Perimeters");
                }
                return _Perimeters;
            }
        }
        private ObjectSet<Perimeter> _Perimeters;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Project_Organisms> Project_Organisms//custom-code for testability
        {
            get
            {
                if ((_Project_Organisms == null))
                {
                    _Project_Organisms = base.CreateObjectSet<Project_Organisms>("Project_Organisms");
                }
                return _Project_Organisms;
            }
        }
        private ObjectSet<Project_Organisms> _Project_Organisms;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<ProjectInfo> ProjectInfoes//custom-code for testability
        {
            get
            {
                if ((_ProjectInfoes == null))
                {
                    _ProjectInfoes = base.CreateObjectSet<ProjectInfo>("ProjectInfoes");
                }
                return _ProjectInfoes;
            }
        }
        private ObjectSet<ProjectInfo> _ProjectInfoes;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<ProjectInfoTreeLocation> ProjectInfoTreeLocations//custom-code for testability
        {
            get
            {
                if ((_ProjectInfoTreeLocations == null))
                {
                    _ProjectInfoTreeLocations = base.CreateObjectSet<ProjectInfoTreeLocation>("ProjectInfoTreeLocations");
                }
                return _ProjectInfoTreeLocations;
            }
        }
        private ObjectSet<ProjectInfoTreeLocation> _ProjectInfoTreeLocations;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Project> Projects//custom-code for testability
        {
            get
            {
                if ((_Projects == null))
                {
                    _Projects = base.CreateObjectSet<Project>("Projects");
                }
                return _Projects;
            }
        }
        private ObjectSet<Project> _Projects;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Rep> Reps//custom-code for testability
        {
            get
            {
                if ((_Reps == null))
                {
                    _Reps = base.CreateObjectSet<Rep>("Reps");
                }
                return _Reps;
            }
        }
        private ObjectSet<Rep> _Reps;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Role_Users> Role_Users//custom-code for testability
        {
            get
            {
                if ((_Role_Users == null))
                {
                    _Role_Users = base.CreateObjectSet<Role_Users>("Role_Users");
                }
                return _Role_Users;
            }
        }
        private ObjectSet<Role_Users> _Role_Users;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Role> Roles//custom-code for testability
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<ScientificName> ScientificNames//custom-code for testability
        {
            get
            {
                if ((_ScientificNames == null))
                {
                    _ScientificNames = base.CreateObjectSet<ScientificName>("ScientificNames");
                }
                return _ScientificNames;
            }
        }
        private ObjectSet<ScientificName> _ScientificNames;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<TermsAndCondition> TermsAndConditions//custom-code for testability
        {
            get
            {
                if ((_TermsAndConditions == null))
                {
                    _TermsAndConditions = base.CreateObjectSet<TermsAndCondition>("TermsAndConditions");
                }
                return _TermsAndConditions;
            }
        }
        private ObjectSet<TermsAndCondition> _TermsAndConditions;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<Token> Tokens//custom-code for testability
        {
            get
            {
                if ((_Tokens == null))
                {
                    _Tokens = base.CreateObjectSet<Token>("Tokens");
                }
                return _Tokens;
            }
        }
        private ObjectSet<Token> _Tokens;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<TokenType> TokenTypes//custom-code for testability
        {
            get
            {
                if ((_TokenTypes == null))
                {
                    _TokenTypes = base.CreateObjectSet<TokenType>("TokenTypes");
                }
                return _TokenTypes;
            }
        }
        private ObjectSet<TokenType> _TokenTypes;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<TreeDetail> TreeDetails//custom-code for testability
        {
            get
            {
                if ((_TreeDetails == null))
                {
                    _TreeDetails = base.CreateObjectSet<TreeDetail>("TreeDetails");
                }
                return _TreeDetails;
            }
        }
        private ObjectSet<TreeDetail> _TreeDetails;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<UserInfo> UserInfoes//custom-code for testability
        {
            get
            {
                if ((_UserInfoes == null))
                {
                    _UserInfoes = base.CreateObjectSet<UserInfo>("UserInfoes");
                }
                return _UserInfoes;
            }
        }
        private ObjectSet<UserInfo> _UserInfoes;
    
        /// <summary>..
        /// No Metadata Documentation available.
        /// </summary>
        public virtual IObjectSet<User> Users//custom-code for testability
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActionProposeds EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActionProposeds(ActionProposed actionProposed)
        {
            base.AddObject("ActionProposeds", actionProposed);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Application_Groups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApplication_Groups(Application_Groups application_Groups)
        {
            base.AddObject("Application_Groups", application_Groups);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Applications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApplications(Application application)
        {
            base.AddObject("Applications", application);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Colors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToColors(Color color)
        {
            base.AddObject("Colors", color);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommonNames EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommonNames(CommonName commonName)
        {
            base.AddObject("CommonNames", commonName);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Conditions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToConditions(Condition condition)
        {
            base.AddObject("Conditions", condition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Daps EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDaps(Dap dap)
        {
            base.AddObject("Daps", dap);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Devices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDevices(Device device)
        {
            base.AddObject("Devices", device);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Group_Projects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroup_Projects(Group_Projects group_Projects)
        {
            base.AddObject("Group_Projects", group_Projects);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Group_Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroup_Users(Group_Users group_Users)
        {
            base.AddObject("Group_Users", group_Users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Groups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroups(Group group)
        {
            base.AddObject("Groups", group);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Notification_User EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNotification_User(Notification_User notification_User)
        {
            base.AddObject("Notification_User", notification_User);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Notifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNotifications(Notification notification)
        {
            base.AddObject("Notifications", notification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Organisms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganisms(Organism organism)
        {
            base.AddObject("Organisms", organism);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OrganismTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganismTypes(OrganismType organismType)
        {
            base.AddObject("OrganismTypes", organismType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PerimeterPoints EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPerimeterPoints(PerimeterPoint perimeterPoint)
        {
            base.AddObject("PerimeterPoints", perimeterPoint);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Perimeters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPerimeters(Perimeter perimeter)
        {
            base.AddObject("Perimeters", perimeter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Project_Organisms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProject_Organisms(Project_Organisms project_Organisms)
        {
            base.AddObject("Project_Organisms", project_Organisms);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProjectInfoes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjectInfoes(ProjectInfo projectInfo)
        {
            base.AddObject("ProjectInfoes", projectInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProjectInfoTreeLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjectInfoTreeLocations(ProjectInfoTreeLocation projectInfoTreeLocation)
        {
            base.AddObject("ProjectInfoTreeLocations", projectInfoTreeLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Projects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjects(Project project)
        {
            base.AddObject("Projects", project);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Reps EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReps(Rep rep)
        {
            base.AddObject("Reps", rep);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Role_Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRole_Users(Role_Users role_Users)
        {
            base.AddObject("Role_Users", role_Users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ScientificNames EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToScientificNames(ScientificName scientificName)
        {
            base.AddObject("ScientificNames", scientificName);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TermsAndConditions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTermsAndConditions(TermsAndCondition termsAndCondition)
        {
            base.AddObject("TermsAndConditions", termsAndCondition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tokens EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTokens(Token token)
        {
            base.AddObject("Tokens", token);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TokenTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTokenTypes(TokenType tokenType)
        {
            base.AddObject("TokenTypes", tokenType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TreeDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTreeDetails(TreeDetail treeDetail)
        {
            base.AddObject("TreeDetails", treeDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserInfoes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserInfoes(UserInfo userInfo)
        {
            base.AddObject("UserInfoes", userInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

    }
    

    #endregion

    }//custom-code
    
