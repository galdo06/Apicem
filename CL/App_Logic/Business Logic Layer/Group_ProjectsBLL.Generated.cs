//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class Group_ProjectsBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public Group_ProjectsBLL() : this(new DatabaseContext()) { }

        public Group_ProjectsBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnGroup_ProjectsSaving(Group_Projects group_Projects);

        partial void OnGroup_ProjectsCreating(Group_Projects group_Projects);
        partial void OnGroup_ProjectsCreated(Group_Projects group_Projects);

        partial void OnGroup_ProjectsUpdating(Group_Projects group_Projects);
        partial void OnGroup_ProjectsUpdated(Group_Projects group_Projects);

        partial void OnGroup_ProjectsSaved(Group_Projects group_Projects);

        partial void OnGroup_ProjectsDeleting(Group_Projects group_Projects);
        partial void OnGroup_ProjectsDeleted(Group_Projects group_Projects);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Group_Projects GetGroup_ProjectsByGroupProjectID(int groupProjectID)
        {
            //Validate Input
            if (groupProjectID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("groupProjectID");
            return (_DatabaseContext.Group_Projects.FirstOrDefault(group_Projects => group_Projects.GroupProjectID == groupProjectID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetGroup_ProjectsByGroupID(int groupID)
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllGroup_Projects();
 
            return (from group_Projects in _DatabaseContext.Group_Projects
                    where groupID == null ? group_Projects.GroupID == null : group_Projects.GroupID == groupID
                    select group_Projects).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetGroup_ProjectsByGroupIDPaged(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllGroup_ProjectsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "GroupProjectID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from group_Projects in
                        _DatabaseContext.Group_Projects
                        .DynamicOrderBy(orderBy)
                    where groupID == null ? group_Projects.GroupID == null : group_Projects.GroupID == groupID
                    select group_Projects
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllGroup_ProjectsByGroupID(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetTotalCountForAllGroup_Projects(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Group_Projects.Count(group_Projects => groupID == null ? group_Projects.GroupID == null : group_Projects.GroupID == groupID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetGroup_ProjectsByProjectID(int projectID)
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllGroup_Projects();
 
            return (from group_Projects in _DatabaseContext.Group_Projects
                    where projectID == null ? group_Projects.ProjectID == null : group_Projects.ProjectID == projectID
                    select group_Projects).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetGroup_ProjectsByProjectIDPaged(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllGroup_ProjectsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "GroupProjectID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from group_Projects in
                        _DatabaseContext.Group_Projects
                        .DynamicOrderBy(orderBy)
                    where projectID == null ? group_Projects.ProjectID == null : group_Projects.ProjectID == projectID
                    select group_Projects
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllGroup_ProjectsByProjectID(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetTotalCountForAllGroup_Projects(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Group_Projects.Count(group_Projects => projectID == null ? group_Projects.ProjectID == null : group_Projects.ProjectID == projectID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetAllGroup_Projects()
        {
            return _DatabaseContext.Group_Projects.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group_Projects> GetAllGroup_ProjectsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "GroupProjectID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from group_ProjectsList in 
                        _DatabaseContext.Group_Projects
                        .DynamicOrderBy(orderBy)
                    select group_ProjectsList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllGroup_Projects(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Group_Projects.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewGroup_Projects(Group_Projects newGroup_Projects)
        {
            // Validate Parameters 
            if (newGroup_Projects == null)
                throw (new ArgumentNullException("newGroup_Projects"));

	        // Apply business rules
            OnGroup_ProjectsSaving(newGroup_Projects);
            OnGroup_ProjectsCreating(newGroup_Projects);

            _DatabaseContext.Group_Projects.AddObject(newGroup_Projects);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No group_Projects created!");

            // Apply business workflow
            OnGroup_ProjectsCreated(newGroup_Projects);
            OnGroup_ProjectsSaved(newGroup_Projects);

            return newGroup_Projects.GroupProjectID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateGroup_Projects(Group_Projects updatedGroup_Projects)
        {
            // Validate Parameters
            if (updatedGroup_Projects == null)
                throw (new ArgumentNullException("updatedGroup_Projects"));

            // Validate Primary key value
            if (updatedGroup_Projects.GroupProjectID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupProjectID");

            // Apply business rules
            OnGroup_ProjectsSaving(updatedGroup_Projects);
            OnGroup_ProjectsUpdating(updatedGroup_Projects);

            //attaching and making ready for parsistance
            if (updatedGroup_Projects.EntityState == EntityState.Detached)
                _DatabaseContext.Group_Projects.Attach(updatedGroup_Projects);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedGroup_Projects, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No group_Projects updated!");

            //Apply business workflow
            OnGroup_ProjectsUpdated(updatedGroup_Projects);
            OnGroup_ProjectsSaved(updatedGroup_Projects);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteGroup_Projects(Group_Projects group_ProjectsToBeDeleted)
        {
            //Validate Input
            if (group_ProjectsToBeDeleted == null)
                throw (new ArgumentNullException("group_ProjectsToBeDeleted"));

            // Validate Primary key value
            if (group_ProjectsToBeDeleted.GroupProjectID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupProjectID");

            OnGroup_ProjectsSaving(group_ProjectsToBeDeleted);
            OnGroup_ProjectsDeleting(group_ProjectsToBeDeleted);

            if (group_ProjectsToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Group_Projects.Attach(group_ProjectsToBeDeleted);
			_DatabaseContext.Group_Projects.DeleteObject(group_ProjectsToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Group_Projects deleted!");
            
            OnGroup_ProjectsDeleted(group_ProjectsToBeDeleted);
            OnGroup_ProjectsSaved(group_ProjectsToBeDeleted);

        }

        public void DeleteGroup_Projects(List<int> groupProjectIDsToDelete)
        {
            //Validate Input
            foreach (int groupProjectID in groupProjectIDsToDelete)
                if (groupProjectID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupProjectID");

            List<Group_Projects> group_ProjectssToBeDeleted = new List<Group_Projects>();

            foreach (int groupProjectID in groupProjectIDsToDelete)
            {
                Group_Projects group_Projects = new Group_Projects { GroupProjectID = groupProjectID };
                _DatabaseContext.Group_Projects.Attach(group_Projects);
				_DatabaseContext.Group_Projects.DeleteObject(group_Projects);
                group_ProjectssToBeDeleted.Add(group_Projects);
                OnGroup_ProjectsDeleting(group_Projects);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != groupProjectIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more group_Projects records have not been deleted.");
            foreach (Group_Projects group_ProjectsToBeDeleted in group_ProjectssToBeDeleted)
                OnGroup_ProjectsDeleted(group_ProjectsToBeDeleted);
        }

        #endregion
	
	}
}
