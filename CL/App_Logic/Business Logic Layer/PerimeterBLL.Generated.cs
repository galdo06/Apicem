//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class PerimeterBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public PerimeterBLL() : this(new DatabaseContext()) { }

        public PerimeterBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnPerimeterSaving(Perimeter perimeter);

        partial void OnPerimeterCreating(Perimeter perimeter);
        partial void OnPerimeterCreated(Perimeter perimeter);

        partial void OnPerimeterUpdating(Perimeter perimeter);
        partial void OnPerimeterUpdated(Perimeter perimeter);

        partial void OnPerimeterSaved(Perimeter perimeter);

        partial void OnPerimeterDeleting(Perimeter perimeter);
        partial void OnPerimeterDeleted(Perimeter perimeter);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Perimeter GetPerimeterByPerimeterID(int perimeterID)
        {
            //Validate Input
            if (perimeterID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("perimeterID");
            return (_DatabaseContext.Perimeters.FirstOrDefault(perimeter => perimeter.PerimeterID == perimeterID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetPerimetersByColorID(int colorID)
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetAllPerimeters();
 
            return (from perimeter in _DatabaseContext.Perimeters
                    where colorID == null ? perimeter.ColorID == null : perimeter.ColorID == colorID
                    select perimeter).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetPerimetersByColorIDPaged(int colorID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetAllPerimetersPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "PerimeterID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from perimeter in
                        _DatabaseContext.Perimeters
                        .DynamicOrderBy(orderBy)
                    where colorID == null ? perimeter.ColorID == null : perimeter.ColorID == colorID
                    select perimeter
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllPerimetersByColorID(int colorID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetTotalCountForAllPerimeters(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Perimeters.Count(perimeter => colorID == null ? perimeter.ColorID == null : perimeter.ColorID == colorID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetPerimetersByProjectID(int projectID)
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllPerimeters();
 
            return (from perimeter in _DatabaseContext.Perimeters
                    where projectID == null ? perimeter.ProjectID == null : perimeter.ProjectID == projectID
                    select perimeter).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetPerimetersByProjectIDPaged(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllPerimetersPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "PerimeterID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from perimeter in
                        _DatabaseContext.Perimeters
                        .DynamicOrderBy(orderBy)
                    where projectID == null ? perimeter.ProjectID == null : perimeter.ProjectID == projectID
                    select perimeter
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllPerimetersByProjectID(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetTotalCountForAllPerimeters(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Perimeters.Count(perimeter => projectID == null ? perimeter.ProjectID == null : perimeter.ProjectID == projectID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetAllPerimeters()
        {
            return _DatabaseContext.Perimeters.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Perimeter> GetAllPerimetersPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "PerimeterID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from perimeterList in 
                        _DatabaseContext.Perimeters
                        .DynamicOrderBy(orderBy)
                    select perimeterList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllPerimeters(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Perimeters.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewPerimeter(Perimeter newPerimeter)
        {
            // Validate Parameters 
            if (newPerimeter == null)
                throw (new ArgumentNullException("newPerimeter"));

	        // Apply business rules
            OnPerimeterSaving(newPerimeter);
            OnPerimeterCreating(newPerimeter);

            _DatabaseContext.Perimeters.AddObject(newPerimeter);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No perimeter created!");

            // Apply business workflow
            OnPerimeterCreated(newPerimeter);
            OnPerimeterSaved(newPerimeter);

            return newPerimeter.PerimeterID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdatePerimeter(Perimeter updatedPerimeter)
        {
            // Validate Parameters
            if (updatedPerimeter == null)
                throw (new ArgumentNullException("updatedPerimeter"));

            // Validate Primary key value
            if (updatedPerimeter.PerimeterID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterID");

            // Apply business rules
            OnPerimeterSaving(updatedPerimeter);
            OnPerimeterUpdating(updatedPerimeter);

            //attaching and making ready for parsistance
            if (updatedPerimeter.EntityState == EntityState.Detached)
                _DatabaseContext.Perimeters.Attach(updatedPerimeter);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedPerimeter, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No perimeter updated!");

            //Apply business workflow
            OnPerimeterUpdated(updatedPerimeter);
            OnPerimeterSaved(updatedPerimeter);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeletePerimeter(Perimeter perimeterToBeDeleted)
        {
            //Validate Input
            if (perimeterToBeDeleted == null)
                throw (new ArgumentNullException("perimeterToBeDeleted"));

            // Validate Primary key value
            if (perimeterToBeDeleted.PerimeterID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterID");

            OnPerimeterSaving(perimeterToBeDeleted);
            OnPerimeterDeleting(perimeterToBeDeleted);

            if (perimeterToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Perimeters.Attach(perimeterToBeDeleted);
			_DatabaseContext.Perimeters.DeleteObject(perimeterToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Perimeter deleted!");
            
            OnPerimeterDeleted(perimeterToBeDeleted);
            OnPerimeterSaved(perimeterToBeDeleted);

        }

        public void DeletePerimeters(List<int> perimeterIDsToDelete)
        {
            //Validate Input
            foreach (int perimeterID in perimeterIDsToDelete)
                if (perimeterID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterID");

            List<Perimeter> perimetersToBeDeleted = new List<Perimeter>();

            foreach (int perimeterID in perimeterIDsToDelete)
            {
                Perimeter perimeter = new Perimeter { PerimeterID = perimeterID };
                _DatabaseContext.Perimeters.Attach(perimeter);
				_DatabaseContext.Perimeters.DeleteObject(perimeter);
                perimetersToBeDeleted.Add(perimeter);
                OnPerimeterDeleting(perimeter);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != perimeterIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more perimeter records have not been deleted.");
            foreach (Perimeter perimeterToBeDeleted in perimetersToBeDeleted)
                OnPerimeterDeleted(perimeterToBeDeleted);
        }

        #endregion
	
	}
}
