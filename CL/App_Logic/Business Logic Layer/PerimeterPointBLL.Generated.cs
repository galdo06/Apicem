//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class PerimeterPointBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public PerimeterPointBLL() : this(new DatabaseContext()) { }

        public PerimeterPointBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnPerimeterPointSaving(PerimeterPoint perimeterPoint);

        partial void OnPerimeterPointCreating(PerimeterPoint perimeterPoint);
        partial void OnPerimeterPointCreated(PerimeterPoint perimeterPoint);

        partial void OnPerimeterPointUpdating(PerimeterPoint perimeterPoint);
        partial void OnPerimeterPointUpdated(PerimeterPoint perimeterPoint);

        partial void OnPerimeterPointSaved(PerimeterPoint perimeterPoint);

        partial void OnPerimeterPointDeleting(PerimeterPoint perimeterPoint);
        partial void OnPerimeterPointDeleted(PerimeterPoint perimeterPoint);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public PerimeterPoint GetPerimeterPointByPerimeterPointID(int perimeterPointID)
        {
            //Validate Input
            if (perimeterPointID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("perimeterPointID");
            return (_DatabaseContext.PerimeterPoints.FirstOrDefault(perimeterPoint => perimeterPoint.PerimeterPointID == perimeterPointID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<PerimeterPoint> GetPerimeterPointsByPerimeterID(int perimeterID)
        {
            //Validate Input
            if (perimeterID.IsEmpty())
                return GetAllPerimeterPoints();
 
            return (from perimeterPoint in _DatabaseContext.PerimeterPoints
                    where perimeterID == null ? perimeterPoint.PerimeterID == null : perimeterPoint.PerimeterID == perimeterID
                    select perimeterPoint).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<PerimeterPoint> GetPerimeterPointsByPerimeterIDPaged(int perimeterID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (perimeterID.IsEmpty())
                return GetAllPerimeterPointsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "PerimeterPointID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from perimeterPoint in
                        _DatabaseContext.PerimeterPoints
                        .DynamicOrderBy(orderBy)
                    where perimeterID == null ? perimeterPoint.PerimeterID == null : perimeterPoint.PerimeterID == perimeterID
                    select perimeterPoint
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllPerimeterPointsByPerimeterID(int perimeterID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (perimeterID.IsEmpty())
                return GetTotalCountForAllPerimeterPoints(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.PerimeterPoints.Count(perimeterPoint => perimeterID == null ? perimeterPoint.PerimeterID == null : perimeterPoint.PerimeterID == perimeterID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<PerimeterPoint> GetAllPerimeterPoints()
        {
            return _DatabaseContext.PerimeterPoints.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<PerimeterPoint> GetAllPerimeterPointsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "PerimeterPointID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from perimeterPointList in 
                        _DatabaseContext.PerimeterPoints
                        .DynamicOrderBy(orderBy)
                    select perimeterPointList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllPerimeterPoints(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.PerimeterPoints.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewPerimeterPoint(PerimeterPoint newPerimeterPoint)
        {
            // Validate Parameters 
            if (newPerimeterPoint == null)
                throw (new ArgumentNullException("newPerimeterPoint"));

	        // Apply business rules
            OnPerimeterPointSaving(newPerimeterPoint);
            OnPerimeterPointCreating(newPerimeterPoint);

            _DatabaseContext.PerimeterPoints.AddObject(newPerimeterPoint);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No perimeterPoint created!");

            // Apply business workflow
            OnPerimeterPointCreated(newPerimeterPoint);
            OnPerimeterPointSaved(newPerimeterPoint);

            return newPerimeterPoint.PerimeterPointID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdatePerimeterPoint(PerimeterPoint updatedPerimeterPoint)
        {
            // Validate Parameters
            if (updatedPerimeterPoint == null)
                throw (new ArgumentNullException("updatedPerimeterPoint"));

            // Validate Primary key value
            if (updatedPerimeterPoint.PerimeterPointID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterPointID");

            // Apply business rules
            OnPerimeterPointSaving(updatedPerimeterPoint);
            OnPerimeterPointUpdating(updatedPerimeterPoint);

            //attaching and making ready for parsistance
            if (updatedPerimeterPoint.EntityState == EntityState.Detached)
                _DatabaseContext.PerimeterPoints.Attach(updatedPerimeterPoint);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedPerimeterPoint, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No perimeterPoint updated!");

            //Apply business workflow
            OnPerimeterPointUpdated(updatedPerimeterPoint);
            OnPerimeterPointSaved(updatedPerimeterPoint);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeletePerimeterPoint(PerimeterPoint perimeterPointToBeDeleted)
        {
            //Validate Input
            if (perimeterPointToBeDeleted == null)
                throw (new ArgumentNullException("perimeterPointToBeDeleted"));

            // Validate Primary key value
            if (perimeterPointToBeDeleted.PerimeterPointID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterPointID");

            OnPerimeterPointSaving(perimeterPointToBeDeleted);
            OnPerimeterPointDeleting(perimeterPointToBeDeleted);

            if (perimeterPointToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.PerimeterPoints.Attach(perimeterPointToBeDeleted);
			_DatabaseContext.PerimeterPoints.DeleteObject(perimeterPointToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No PerimeterPoint deleted!");
            
            OnPerimeterPointDeleted(perimeterPointToBeDeleted);
            OnPerimeterPointSaved(perimeterPointToBeDeleted);

        }

        public void DeletePerimeterPoints(List<int> perimeterPointIDsToDelete)
        {
            //Validate Input
            foreach (int perimeterPointID in perimeterPointIDsToDelete)
                if (perimeterPointID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("PerimeterPointID");

            List<PerimeterPoint> perimeterPointsToBeDeleted = new List<PerimeterPoint>();

            foreach (int perimeterPointID in perimeterPointIDsToDelete)
            {
                PerimeterPoint perimeterPoint = new PerimeterPoint { PerimeterPointID = perimeterPointID };
                _DatabaseContext.PerimeterPoints.Attach(perimeterPoint);
				_DatabaseContext.PerimeterPoints.DeleteObject(perimeterPoint);
                perimeterPointsToBeDeleted.Add(perimeterPoint);
                OnPerimeterPointDeleting(perimeterPoint);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != perimeterPointIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more perimeterPoint records have not been deleted.");
            foreach (PerimeterPoint perimeterPointToBeDeleted in perimeterPointsToBeDeleted)
                OnPerimeterPointDeleted(perimeterPointToBeDeleted);
        }

        #endregion
	
	}
}
