//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ApplicationBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ApplicationBLL() : this(new DatabaseContext()) { }

        public ApplicationBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnApplicationSaving(Application application);

        partial void OnApplicationCreating(Application application);
        partial void OnApplicationCreated(Application application);

        partial void OnApplicationUpdating(Application application);
        partial void OnApplicationUpdated(Application application);

        partial void OnApplicationSaved(Application application);

        partial void OnApplicationDeleting(Application application);
        partial void OnApplicationDeleted(Application application);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Application GetApplicationByApplicationID(int applicationID)
        {
            //Validate Input
            if (applicationID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("applicationID");
            return (_DatabaseContext.Applications.FirstOrDefault(application => application.ApplicationID == applicationID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application> GetAllApplications()
        {
            return _DatabaseContext.Applications.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application> GetAllApplicationsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ApplicationID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from applicationList in 
                        _DatabaseContext.Applications
                        .DynamicOrderBy(orderBy)
                    select applicationList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllApplications(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Applications.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewApplication(Application newApplication)
        {
            // Validate Parameters 
            if (newApplication == null)
                throw (new ArgumentNullException("newApplication"));

	        // Apply business rules
            OnApplicationSaving(newApplication);
            OnApplicationCreating(newApplication);

            _DatabaseContext.Applications.AddObject(newApplication);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No application created!");

            // Apply business workflow
            OnApplicationCreated(newApplication);
            OnApplicationSaved(newApplication);

            return newApplication.ApplicationID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateApplication(Application updatedApplication)
        {
            // Validate Parameters
            if (updatedApplication == null)
                throw (new ArgumentNullException("updatedApplication"));

            // Validate Primary key value
            if (updatedApplication.ApplicationID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationID");

            // Apply business rules
            OnApplicationSaving(updatedApplication);
            OnApplicationUpdating(updatedApplication);

            //attaching and making ready for parsistance
            if (updatedApplication.EntityState == EntityState.Detached)
                _DatabaseContext.Applications.Attach(updatedApplication);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedApplication, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No application updated!");

            //Apply business workflow
            OnApplicationUpdated(updatedApplication);
            OnApplicationSaved(updatedApplication);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteApplication(Application applicationToBeDeleted)
        {
            //Validate Input
            if (applicationToBeDeleted == null)
                throw (new ArgumentNullException("applicationToBeDeleted"));

            // Validate Primary key value
            if (applicationToBeDeleted.ApplicationID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationID");

            OnApplicationSaving(applicationToBeDeleted);
            OnApplicationDeleting(applicationToBeDeleted);

            if (applicationToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Applications.Attach(applicationToBeDeleted);
			_DatabaseContext.Applications.DeleteObject(applicationToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Application deleted!");
            
            OnApplicationDeleted(applicationToBeDeleted);
            OnApplicationSaved(applicationToBeDeleted);

        }

        public void DeleteApplications(List<int> applicationIDsToDelete)
        {
            //Validate Input
            foreach (int applicationID in applicationIDsToDelete)
                if (applicationID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationID");

            List<Application> applicationsToBeDeleted = new List<Application>();

            foreach (int applicationID in applicationIDsToDelete)
            {
                Application application = new Application { ApplicationID = applicationID };
                _DatabaseContext.Applications.Attach(application);
				_DatabaseContext.Applications.DeleteObject(application);
                applicationsToBeDeleted.Add(application);
                OnApplicationDeleting(application);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != applicationIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more application records have not been deleted.");
            foreach (Application applicationToBeDeleted in applicationsToBeDeleted)
                OnApplicationDeleted(applicationToBeDeleted);
        }

        #endregion
	
	}
}
