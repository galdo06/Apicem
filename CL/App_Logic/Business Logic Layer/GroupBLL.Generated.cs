//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class GroupBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public GroupBLL() : this(new DatabaseContext()) { }

        public GroupBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnGroupSaving(Group group);

        partial void OnGroupCreating(Group group);
        partial void OnGroupCreated(Group group);

        partial void OnGroupUpdating(Group group);
        partial void OnGroupUpdated(Group group);

        partial void OnGroupSaved(Group group);

        partial void OnGroupDeleting(Group group);
        partial void OnGroupDeleted(Group group);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Group GetGroupByGroupID(int groupID)
        {
            //Validate Input
            if (groupID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("groupID");
            return (_DatabaseContext.Groups.FirstOrDefault(group => group.GroupID == groupID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group> GetAllGroups()
        {
            return _DatabaseContext.Groups.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Group> GetAllGroupsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "GroupID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from groupList in 
                        _DatabaseContext.Groups
                        .DynamicOrderBy(orderBy)
                    select groupList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllGroups(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Groups.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewGroup(Group newGroup)
        {
            // Validate Parameters 
            if (newGroup == null)
                throw (new ArgumentNullException("newGroup"));

	        // Apply business rules
            OnGroupSaving(newGroup);
            OnGroupCreating(newGroup);

            _DatabaseContext.Groups.AddObject(newGroup);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No group created!");

            // Apply business workflow
            OnGroupCreated(newGroup);
            OnGroupSaved(newGroup);

            return newGroup.GroupID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateGroup(Group updatedGroup)
        {
            // Validate Parameters
            if (updatedGroup == null)
                throw (new ArgumentNullException("updatedGroup"));

            // Validate Primary key value
            if (updatedGroup.GroupID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupID");

            // Apply business rules
            OnGroupSaving(updatedGroup);
            OnGroupUpdating(updatedGroup);

            //attaching and making ready for parsistance
            if (updatedGroup.EntityState == EntityState.Detached)
                _DatabaseContext.Groups.Attach(updatedGroup);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedGroup, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No group updated!");

            //Apply business workflow
            OnGroupUpdated(updatedGroup);
            OnGroupSaved(updatedGroup);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteGroup(Group groupToBeDeleted)
        {
            //Validate Input
            if (groupToBeDeleted == null)
                throw (new ArgumentNullException("groupToBeDeleted"));

            // Validate Primary key value
            if (groupToBeDeleted.GroupID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupID");

            OnGroupSaving(groupToBeDeleted);
            OnGroupDeleting(groupToBeDeleted);

            if (groupToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Groups.Attach(groupToBeDeleted);
			_DatabaseContext.Groups.DeleteObject(groupToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Group deleted!");
            
            OnGroupDeleted(groupToBeDeleted);
            OnGroupSaved(groupToBeDeleted);

        }

        public void DeleteGroups(List<int> groupIDsToDelete)
        {
            //Validate Input
            foreach (int groupID in groupIDsToDelete)
                if (groupID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("GroupID");

            List<Group> groupsToBeDeleted = new List<Group>();

            foreach (int groupID in groupIDsToDelete)
            {
                Group group = new Group { GroupID = groupID };
                _DatabaseContext.Groups.Attach(group);
				_DatabaseContext.Groups.DeleteObject(group);
                groupsToBeDeleted.Add(group);
                OnGroupDeleting(group);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != groupIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more group records have not been deleted.");
            foreach (Group groupToBeDeleted in groupsToBeDeleted)
                OnGroupDeleted(groupToBeDeleted);
        }

        #endregion
	
	}
}
