//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class TokenBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public TokenBLL() : this(new DatabaseContext()) { }

        public TokenBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnTokenSaving(Token token);

        partial void OnTokenCreating(Token token);
        partial void OnTokenCreated(Token token);

        partial void OnTokenUpdating(Token token);
        partial void OnTokenUpdated(Token token);

        partial void OnTokenSaved(Token token);

        partial void OnTokenDeleting(Token token);
        partial void OnTokenDeleted(Token token);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Token GetTokenByTokenID(int tokenID)
        {
            //Validate Input
            if (tokenID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("tokenID");
            return (_DatabaseContext.Tokens.FirstOrDefault(token => token.TokenID == tokenID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetTokensByDeviceID(int deviceID)
        {
            //Validate Input
            if (deviceID.IsEmpty())
                return GetAllTokens();
 
            return (from token in _DatabaseContext.Tokens
                    where deviceID == null ? token.DeviceID == null : token.DeviceID == deviceID
                    select token).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetTokensByDeviceIDPaged(int deviceID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (deviceID.IsEmpty())
                return GetAllTokensPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TokenID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from token in
                        _DatabaseContext.Tokens
                        .DynamicOrderBy(orderBy)
                    where deviceID == null ? token.DeviceID == null : token.DeviceID == deviceID
                    select token
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTokensByDeviceID(int deviceID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (deviceID.IsEmpty())
                return GetTotalCountForAllTokens(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Tokens.Count(token => deviceID == null ? token.DeviceID == null : token.DeviceID == deviceID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetTokensByTokenTypeID(int tokenTypeID)
        {
            //Validate Input
            if (tokenTypeID.IsEmpty())
                return GetAllTokens();
 
            return (from token in _DatabaseContext.Tokens
                    where tokenTypeID == null ? token.TokenTypeID == null : token.TokenTypeID == tokenTypeID
                    select token).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetTokensByTokenTypeIDPaged(int tokenTypeID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (tokenTypeID.IsEmpty())
                return GetAllTokensPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TokenID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from token in
                        _DatabaseContext.Tokens
                        .DynamicOrderBy(orderBy)
                    where tokenTypeID == null ? token.TokenTypeID == null : token.TokenTypeID == tokenTypeID
                    select token
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTokensByTokenTypeID(int tokenTypeID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (tokenTypeID.IsEmpty())
                return GetTotalCountForAllTokens(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Tokens.Count(token => tokenTypeID == null ? token.TokenTypeID == null : token.TokenTypeID == tokenTypeID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetAllTokens()
        {
            return _DatabaseContext.Tokens.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Token> GetAllTokensPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TokenID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from tokenList in 
                        _DatabaseContext.Tokens
                        .DynamicOrderBy(orderBy)
                    select tokenList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTokens(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Tokens.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewToken(Token newToken)
        {
            // Validate Parameters 
            if (newToken == null)
                throw (new ArgumentNullException("newToken"));

	        // Apply business rules
            OnTokenSaving(newToken);
            OnTokenCreating(newToken);

            _DatabaseContext.Tokens.AddObject(newToken);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No token created!");

            // Apply business workflow
            OnTokenCreated(newToken);
            OnTokenSaved(newToken);

            return newToken.TokenID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateToken(Token updatedToken)
        {
            // Validate Parameters
            if (updatedToken == null)
                throw (new ArgumentNullException("updatedToken"));

            // Validate Primary key value
            if (updatedToken.TokenID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TokenID");

            // Apply business rules
            OnTokenSaving(updatedToken);
            OnTokenUpdating(updatedToken);

            //attaching and making ready for parsistance
            if (updatedToken.EntityState == EntityState.Detached)
                _DatabaseContext.Tokens.Attach(updatedToken);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedToken, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No token updated!");

            //Apply business workflow
            OnTokenUpdated(updatedToken);
            OnTokenSaved(updatedToken);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteToken(Token tokenToBeDeleted)
        {
            //Validate Input
            if (tokenToBeDeleted == null)
                throw (new ArgumentNullException("tokenToBeDeleted"));

            // Validate Primary key value
            if (tokenToBeDeleted.TokenID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TokenID");

            OnTokenSaving(tokenToBeDeleted);
            OnTokenDeleting(tokenToBeDeleted);

            if (tokenToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Tokens.Attach(tokenToBeDeleted);
			_DatabaseContext.Tokens.DeleteObject(tokenToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Token deleted!");
            
            OnTokenDeleted(tokenToBeDeleted);
            OnTokenSaved(tokenToBeDeleted);

        }

        public void DeleteTokens(List<int> tokenIDsToDelete)
        {
            //Validate Input
            foreach (int tokenID in tokenIDsToDelete)
                if (tokenID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("TokenID");

            List<Token> tokensToBeDeleted = new List<Token>();

            foreach (int tokenID in tokenIDsToDelete)
            {
                Token token = new Token { TokenID = tokenID };
                _DatabaseContext.Tokens.Attach(token);
				_DatabaseContext.Tokens.DeleteObject(token);
                tokensToBeDeleted.Add(token);
                OnTokenDeleting(token);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != tokenIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more token records have not been deleted.");
            foreach (Token tokenToBeDeleted in tokensToBeDeleted)
                OnTokenDeleted(tokenToBeDeleted);
        }

        #endregion
	
	}
}
