//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class DapBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public DapBLL() : this(new DatabaseContext()) { }

        public DapBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnDapSaving(Dap dap);

        partial void OnDapCreating(Dap dap);
        partial void OnDapCreated(Dap dap);

        partial void OnDapUpdating(Dap dap);
        partial void OnDapUpdated(Dap dap);

        partial void OnDapSaved(Dap dap);

        partial void OnDapDeleting(Dap dap);
        partial void OnDapDeleted(Dap dap);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Dap GetDapByDapID(int dapID)
        {
            //Validate Input
            if (dapID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("dapID");
            return (_DatabaseContext.Daps.FirstOrDefault(dap => dap.DapID == dapID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Dap> GetDapsByTreeDetailsID(int treeDetailsID)
        {
            //Validate Input
            if (treeDetailsID.IsEmpty())
                return GetAllDaps();
 
            return (from dap in _DatabaseContext.Daps
                    where treeDetailsID == null ? dap.TreeDetailsID == null : dap.TreeDetailsID == treeDetailsID
                    select dap).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Dap> GetDapsByTreeDetailsIDPaged(int treeDetailsID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (treeDetailsID.IsEmpty())
                return GetAllDapsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "DapID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from dap in
                        _DatabaseContext.Daps
                        .DynamicOrderBy(orderBy)
                    where treeDetailsID == null ? dap.TreeDetailsID == null : dap.TreeDetailsID == treeDetailsID
                    select dap
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllDapsByTreeDetailsID(int treeDetailsID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (treeDetailsID.IsEmpty())
                return GetTotalCountForAllDaps(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Daps.Count(dap => treeDetailsID == null ? dap.TreeDetailsID == null : dap.TreeDetailsID == treeDetailsID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Dap> GetAllDaps()
        {
            return _DatabaseContext.Daps.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Dap> GetAllDapsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "DapID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from dapList in 
                        _DatabaseContext.Daps
                        .DynamicOrderBy(orderBy)
                    select dapList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllDaps(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Daps.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewDap(Dap newDap)
        {
            // Validate Parameters 
            if (newDap == null)
                throw (new ArgumentNullException("newDap"));

	        // Apply business rules
            OnDapSaving(newDap);
            OnDapCreating(newDap);

            _DatabaseContext.Daps.AddObject(newDap);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No dap created!");

            // Apply business workflow
            OnDapCreated(newDap);
            OnDapSaved(newDap);

            return newDap.DapID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateDap(Dap updatedDap)
        {
            // Validate Parameters
            if (updatedDap == null)
                throw (new ArgumentNullException("updatedDap"));

            // Validate Primary key value
            if (updatedDap.DapID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("DapID");

            // Apply business rules
            OnDapSaving(updatedDap);
            OnDapUpdating(updatedDap);

            //attaching and making ready for parsistance
            if (updatedDap.EntityState == EntityState.Detached)
                _DatabaseContext.Daps.Attach(updatedDap);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedDap, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No dap updated!");

            //Apply business workflow
            OnDapUpdated(updatedDap);
            OnDapSaved(updatedDap);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteDap(Dap dapToBeDeleted)
        {
            //Validate Input
            if (dapToBeDeleted == null)
                throw (new ArgumentNullException("dapToBeDeleted"));

            // Validate Primary key value
            if (dapToBeDeleted.DapID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("DapID");

            OnDapSaving(dapToBeDeleted);
            OnDapDeleting(dapToBeDeleted);

            if (dapToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Daps.Attach(dapToBeDeleted);
			_DatabaseContext.Daps.DeleteObject(dapToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Dap deleted!");
            
            OnDapDeleted(dapToBeDeleted);
            OnDapSaved(dapToBeDeleted);

        }

        public void DeleteDaps(List<int> dapIDsToDelete)
        {
            //Validate Input
            foreach (int dapID in dapIDsToDelete)
                if (dapID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("DapID");

            List<Dap> dapsToBeDeleted = new List<Dap>();

            foreach (int dapID in dapIDsToDelete)
            {
                Dap dap = new Dap { DapID = dapID };
                _DatabaseContext.Daps.Attach(dap);
				_DatabaseContext.Daps.DeleteObject(dap);
                dapsToBeDeleted.Add(dap);
                OnDapDeleting(dap);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != dapIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more dap records have not been deleted.");
            foreach (Dap dapToBeDeleted in dapsToBeDeleted)
                OnDapDeleted(dapToBeDeleted);
        }

        #endregion
	
	}
}
