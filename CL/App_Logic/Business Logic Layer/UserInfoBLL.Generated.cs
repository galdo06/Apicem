//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class UserInfoBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public UserInfoBLL() : this(new DatabaseContext()) { }

        public UserInfoBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnUserInfoSaving(UserInfo userInfo);

        partial void OnUserInfoCreating(UserInfo userInfo);
        partial void OnUserInfoCreated(UserInfo userInfo);

        partial void OnUserInfoUpdating(UserInfo userInfo);
        partial void OnUserInfoUpdated(UserInfo userInfo);

        partial void OnUserInfoSaved(UserInfo userInfo);

        partial void OnUserInfoDeleting(UserInfo userInfo);
        partial void OnUserInfoDeleted(UserInfo userInfo);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public UserInfo GetUserInfoByUserInfoID(int userInfoID)
        {
            //Validate Input
            if (userInfoID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("userInfoID");
            return (_DatabaseContext.UserInfoes.FirstOrDefault(userInfo => userInfo.UserInfoID == userInfoID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<UserInfo> GetUserInfoesByUserID(Guid userID)
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetAllUserInfoes();
 
            return (from userInfo in _DatabaseContext.UserInfoes
                    where userID == null ? userInfo.UserID == null : userInfo.UserID == userID
                    select userInfo).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<UserInfo> GetUserInfoesByUserIDPaged(Guid userID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetAllUserInfoesPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "UserInfoID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from userInfo in
                        _DatabaseContext.UserInfoes
                        .DynamicOrderBy(orderBy)
                    where userID == null ? userInfo.UserID == null : userInfo.UserID == userID
                    select userInfo
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllUserInfoesByUserID(Guid userID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetTotalCountForAllUserInfoes(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.UserInfoes.Count(userInfo => userID == null ? userInfo.UserID == null : userInfo.UserID == userID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<UserInfo> GetAllUserInfoes()
        {
            return _DatabaseContext.UserInfoes.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<UserInfo> GetAllUserInfoesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "UserInfoID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from userInfoList in 
                        _DatabaseContext.UserInfoes
                        .DynamicOrderBy(orderBy)
                    select userInfoList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllUserInfoes(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.UserInfoes.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewUserInfo(UserInfo newUserInfo)
        {
            // Validate Parameters 
            if (newUserInfo == null)
                throw (new ArgumentNullException("newUserInfo"));

	        // Apply business rules
            OnUserInfoSaving(newUserInfo);
            OnUserInfoCreating(newUserInfo);

            _DatabaseContext.UserInfoes.AddObject(newUserInfo);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No userInfo created!");

            // Apply business workflow
            OnUserInfoCreated(newUserInfo);
            OnUserInfoSaved(newUserInfo);

            return newUserInfo.UserInfoID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateUserInfo(UserInfo updatedUserInfo)
        {
            // Validate Parameters
            if (updatedUserInfo == null)
                throw (new ArgumentNullException("updatedUserInfo"));

            // Validate Primary key value
            if (updatedUserInfo.UserInfoID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserInfoID");

            // Apply business rules
            OnUserInfoSaving(updatedUserInfo);
            OnUserInfoUpdating(updatedUserInfo);

            //attaching and making ready for parsistance
            if (updatedUserInfo.EntityState == EntityState.Detached)
                _DatabaseContext.UserInfoes.Attach(updatedUserInfo);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedUserInfo, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No userInfo updated!");

            //Apply business workflow
            OnUserInfoUpdated(updatedUserInfo);
            OnUserInfoSaved(updatedUserInfo);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteUserInfo(UserInfo userInfoToBeDeleted)
        {
            //Validate Input
            if (userInfoToBeDeleted == null)
                throw (new ArgumentNullException("userInfoToBeDeleted"));

            // Validate Primary key value
            if (userInfoToBeDeleted.UserInfoID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserInfoID");

            OnUserInfoSaving(userInfoToBeDeleted);
            OnUserInfoDeleting(userInfoToBeDeleted);

            if (userInfoToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.UserInfoes.Attach(userInfoToBeDeleted);
			_DatabaseContext.UserInfoes.DeleteObject(userInfoToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No UserInfo deleted!");
            
            OnUserInfoDeleted(userInfoToBeDeleted);
            OnUserInfoSaved(userInfoToBeDeleted);

        }

        public void DeleteUserInfoes(List<int> userInfoIDsToDelete)
        {
            //Validate Input
            foreach (int userInfoID in userInfoIDsToDelete)
                if (userInfoID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("UserInfoID");

            List<UserInfo> userInfosToBeDeleted = new List<UserInfo>();

            foreach (int userInfoID in userInfoIDsToDelete)
            {
                UserInfo userInfo = new UserInfo { UserInfoID = userInfoID };
                _DatabaseContext.UserInfoes.Attach(userInfo);
				_DatabaseContext.UserInfoes.DeleteObject(userInfo);
                userInfosToBeDeleted.Add(userInfo);
                OnUserInfoDeleting(userInfo);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != userInfoIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more userInfo records have not been deleted.");
            foreach (UserInfo userInfoToBeDeleted in userInfosToBeDeleted)
                OnUserInfoDeleted(userInfoToBeDeleted);
        }

        #endregion
	
	}
}
