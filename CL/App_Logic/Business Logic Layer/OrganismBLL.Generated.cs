//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class OrganismBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public OrganismBLL() : this(new DatabaseContext()) { }

        public OrganismBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnOrganismSaving(Organism organism);

        partial void OnOrganismCreating(Organism organism);
        partial void OnOrganismCreated(Organism organism);

        partial void OnOrganismUpdating(Organism organism);
        partial void OnOrganismUpdated(Organism organism);

        partial void OnOrganismSaved(Organism organism);

        partial void OnOrganismDeleting(Organism organism);
        partial void OnOrganismDeleted(Organism organism);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Organism GetOrganismByOrganismID(int organismID)
        {
            //Validate Input
            if (organismID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("organismID");
            return (_DatabaseContext.Organisms.FirstOrDefault(organism => organism.OrganismID == organismID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByCommonNameID(int commonNameID)
        {
            //Validate Input
            if (commonNameID.IsEmpty())
                return GetAllOrganisms();
 
            return (from organism in _DatabaseContext.Organisms
                    where commonNameID == null ? organism.CommonNameID == null : organism.CommonNameID == commonNameID
                    select organism).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByCommonNameIDPaged(int commonNameID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (commonNameID.IsEmpty())
                return GetAllOrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "OrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from organism in
                        _DatabaseContext.Organisms
                        .DynamicOrderBy(orderBy)
                    where commonNameID == null ? organism.CommonNameID == null : organism.CommonNameID == commonNameID
                    select organism
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllOrganismsByCommonNameID(int commonNameID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (commonNameID.IsEmpty())
                return GetTotalCountForAllOrganisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Organisms.Count(organism => commonNameID == null ? organism.CommonNameID == null : organism.CommonNameID == commonNameID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByGroupID(int groupID)
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllOrganisms();
 
            return (from organism in _DatabaseContext.Organisms
                    where groupID == null ? organism.GroupID == null : organism.GroupID == groupID
                    select organism).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByGroupIDPaged(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllOrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "OrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from organism in
                        _DatabaseContext.Organisms
                        .DynamicOrderBy(orderBy)
                    where groupID == null ? organism.GroupID == null : organism.GroupID == groupID
                    select organism
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllOrganismsByGroupID(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetTotalCountForAllOrganisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Organisms.Count(organism => groupID == null ? organism.GroupID == null : organism.GroupID == groupID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByOrganismTypeID(int organismTypeID)
        {
            //Validate Input
            if (organismTypeID.IsEmpty())
                return GetAllOrganisms();
 
            return (from organism in _DatabaseContext.Organisms
                    where organismTypeID == null ? organism.OrganismTypeID == null : organism.OrganismTypeID == organismTypeID
                    select organism).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByOrganismTypeIDPaged(int organismTypeID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (organismTypeID.IsEmpty())
                return GetAllOrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "OrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from organism in
                        _DatabaseContext.Organisms
                        .DynamicOrderBy(orderBy)
                    where organismTypeID == null ? organism.OrganismTypeID == null : organism.OrganismTypeID == organismTypeID
                    select organism
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllOrganismsByOrganismTypeID(int organismTypeID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (organismTypeID.IsEmpty())
                return GetTotalCountForAllOrganisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Organisms.Count(organism => organismTypeID == null ? organism.OrganismTypeID == null : organism.OrganismTypeID == organismTypeID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByScientificNameID(int scientificNameID)
        {
            //Validate Input
            if (scientificNameID.IsEmpty())
                return GetAllOrganisms();
 
            return (from organism in _DatabaseContext.Organisms
                    where scientificNameID == null ? organism.ScientificNameID == null : organism.ScientificNameID == scientificNameID
                    select organism).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetOrganismsByScientificNameIDPaged(int scientificNameID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (scientificNameID.IsEmpty())
                return GetAllOrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "OrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from organism in
                        _DatabaseContext.Organisms
                        .DynamicOrderBy(orderBy)
                    where scientificNameID == null ? organism.ScientificNameID == null : organism.ScientificNameID == scientificNameID
                    select organism
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllOrganismsByScientificNameID(int scientificNameID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (scientificNameID.IsEmpty())
                return GetTotalCountForAllOrganisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Organisms.Count(organism => scientificNameID == null ? organism.ScientificNameID == null : organism.ScientificNameID == scientificNameID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetAllOrganisms()
        {
            return _DatabaseContext.Organisms.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Organism> GetAllOrganismsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "OrganismID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from organismList in 
                        _DatabaseContext.Organisms
                        .DynamicOrderBy(orderBy)
                    select organismList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllOrganisms(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Organisms.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewOrganism(Organism newOrganism)
        {
            // Validate Parameters 
            if (newOrganism == null)
                throw (new ArgumentNullException("newOrganism"));

	        // Apply business rules
            OnOrganismSaving(newOrganism);
            OnOrganismCreating(newOrganism);

            _DatabaseContext.Organisms.AddObject(newOrganism);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No organism created!");

            // Apply business workflow
            OnOrganismCreated(newOrganism);
            OnOrganismSaved(newOrganism);

            return newOrganism.OrganismID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateOrganism(Organism updatedOrganism)
        {
            // Validate Parameters
            if (updatedOrganism == null)
                throw (new ArgumentNullException("updatedOrganism"));

            // Validate Primary key value
            if (updatedOrganism.OrganismID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("OrganismID");

            // Apply business rules
            OnOrganismSaving(updatedOrganism);
            OnOrganismUpdating(updatedOrganism);

            //attaching and making ready for parsistance
            if (updatedOrganism.EntityState == EntityState.Detached)
                _DatabaseContext.Organisms.Attach(updatedOrganism);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedOrganism, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No organism updated!");

            //Apply business workflow
            OnOrganismUpdated(updatedOrganism);
            OnOrganismSaved(updatedOrganism);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteOrganism(Organism organismToBeDeleted)
        {
            //Validate Input
            if (organismToBeDeleted == null)
                throw (new ArgumentNullException("organismToBeDeleted"));

            // Validate Primary key value
            if (organismToBeDeleted.OrganismID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("OrganismID");

            OnOrganismSaving(organismToBeDeleted);
            OnOrganismDeleting(organismToBeDeleted);

            if (organismToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Organisms.Attach(organismToBeDeleted);
			_DatabaseContext.Organisms.DeleteObject(organismToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Organism deleted!");
            
            OnOrganismDeleted(organismToBeDeleted);
            OnOrganismSaved(organismToBeDeleted);

        }

        public void DeleteOrganisms(List<int> organismIDsToDelete)
        {
            //Validate Input
            foreach (int organismID in organismIDsToDelete)
                if (organismID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("OrganismID");

            List<Organism> organismsToBeDeleted = new List<Organism>();

            foreach (int organismID in organismIDsToDelete)
            {
                Organism organism = new Organism { OrganismID = organismID };
                _DatabaseContext.Organisms.Attach(organism);
				_DatabaseContext.Organisms.DeleteObject(organism);
                organismsToBeDeleted.Add(organism);
                OnOrganismDeleting(organism);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != organismIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more organism records have not been deleted.");
            foreach (Organism organismToBeDeleted in organismsToBeDeleted)
                OnOrganismDeleted(organismToBeDeleted);
        }

        #endregion
	
	}
}
