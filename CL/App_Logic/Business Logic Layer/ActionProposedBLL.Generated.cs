//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ActionProposedBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ActionProposedBLL() : this(new DatabaseContext()) { }

        public ActionProposedBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnActionProposedSaving(ActionProposed actionProposed);

        partial void OnActionProposedCreating(ActionProposed actionProposed);
        partial void OnActionProposedCreated(ActionProposed actionProposed);

        partial void OnActionProposedUpdating(ActionProposed actionProposed);
        partial void OnActionProposedUpdated(ActionProposed actionProposed);

        partial void OnActionProposedSaved(ActionProposed actionProposed);

        partial void OnActionProposedDeleting(ActionProposed actionProposed);
        partial void OnActionProposedDeleted(ActionProposed actionProposed);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public ActionProposed GetActionProposedByActionProposedID(int actionProposedID)
        {
            //Validate Input
            if (actionProposedID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("actionProposedID");
            return (_DatabaseContext.ActionProposeds.FirstOrDefault(actionProposed => actionProposed.ActionProposedID == actionProposedID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ActionProposed> GetActionProposedsByColorID(int colorID)
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetAllActionProposeds();
 
            return (from actionProposed in _DatabaseContext.ActionProposeds
                    where colorID == null ? actionProposed.ColorID == null : actionProposed.ColorID == colorID
                    select actionProposed).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ActionProposed> GetActionProposedsByColorIDPaged(int colorID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetAllActionProposedsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ActionProposedID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from actionProposed in
                        _DatabaseContext.ActionProposeds
                        .DynamicOrderBy(orderBy)
                    where colorID == null ? actionProposed.ColorID == null : actionProposed.ColorID == colorID
                    select actionProposed
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllActionProposedsByColorID(int colorID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (colorID.IsEmpty())
                return GetTotalCountForAllActionProposeds(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.ActionProposeds.Count(actionProposed => colorID == null ? actionProposed.ColorID == null : actionProposed.ColorID == colorID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ActionProposed> GetAllActionProposeds()
        {
            return _DatabaseContext.ActionProposeds.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ActionProposed> GetAllActionProposedsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ActionProposedID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from actionProposedList in 
                        _DatabaseContext.ActionProposeds
                        .DynamicOrderBy(orderBy)
                    select actionProposedList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllActionProposeds(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.ActionProposeds.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewActionProposed(ActionProposed newActionProposed)
        {
            // Validate Parameters 
            if (newActionProposed == null)
                throw (new ArgumentNullException("newActionProposed"));

	        // Apply business rules
            OnActionProposedSaving(newActionProposed);
            OnActionProposedCreating(newActionProposed);

            _DatabaseContext.ActionProposeds.AddObject(newActionProposed);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No actionProposed created!");

            // Apply business workflow
            OnActionProposedCreated(newActionProposed);
            OnActionProposedSaved(newActionProposed);

            return newActionProposed.ActionProposedID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateActionProposed(ActionProposed updatedActionProposed)
        {
            // Validate Parameters
            if (updatedActionProposed == null)
                throw (new ArgumentNullException("updatedActionProposed"));

            // Validate Primary key value
            if (updatedActionProposed.ActionProposedID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ActionProposedID");

            // Apply business rules
            OnActionProposedSaving(updatedActionProposed);
            OnActionProposedUpdating(updatedActionProposed);

            //attaching and making ready for parsistance
            if (updatedActionProposed.EntityState == EntityState.Detached)
                _DatabaseContext.ActionProposeds.Attach(updatedActionProposed);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedActionProposed, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No actionProposed updated!");

            //Apply business workflow
            OnActionProposedUpdated(updatedActionProposed);
            OnActionProposedSaved(updatedActionProposed);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteActionProposed(ActionProposed actionProposedToBeDeleted)
        {
            //Validate Input
            if (actionProposedToBeDeleted == null)
                throw (new ArgumentNullException("actionProposedToBeDeleted"));

            // Validate Primary key value
            if (actionProposedToBeDeleted.ActionProposedID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ActionProposedID");

            OnActionProposedSaving(actionProposedToBeDeleted);
            OnActionProposedDeleting(actionProposedToBeDeleted);

            if (actionProposedToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.ActionProposeds.Attach(actionProposedToBeDeleted);
			_DatabaseContext.ActionProposeds.DeleteObject(actionProposedToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No ActionProposed deleted!");
            
            OnActionProposedDeleted(actionProposedToBeDeleted);
            OnActionProposedSaved(actionProposedToBeDeleted);

        }

        public void DeleteActionProposeds(List<int> actionProposedIDsToDelete)
        {
            //Validate Input
            foreach (int actionProposedID in actionProposedIDsToDelete)
                if (actionProposedID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ActionProposedID");

            List<ActionProposed> actionProposedsToBeDeleted = new List<ActionProposed>();

            foreach (int actionProposedID in actionProposedIDsToDelete)
            {
                ActionProposed actionProposed = new ActionProposed { ActionProposedID = actionProposedID };
                _DatabaseContext.ActionProposeds.Attach(actionProposed);
				_DatabaseContext.ActionProposeds.DeleteObject(actionProposed);
                actionProposedsToBeDeleted.Add(actionProposed);
                OnActionProposedDeleting(actionProposed);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != actionProposedIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more actionProposed records have not been deleted.");
            foreach (ActionProposed actionProposedToBeDeleted in actionProposedsToBeDeleted)
                OnActionProposedDeleted(actionProposedToBeDeleted);
        }

        #endregion
	
	}
}
