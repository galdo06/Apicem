//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class CityBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public CityBLL() : this(new DatabaseContext()) { }

        public CityBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnCitySaving(City city);

        partial void OnCityCreating(City city);
        partial void OnCityCreated(City city);

        partial void OnCityUpdating(City city);
        partial void OnCityUpdated(City city);

        partial void OnCitySaved(City city);

        partial void OnCityDeleting(City city);
        partial void OnCityDeleted(City city);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public City GetCityByCityID(int cityID)
        {
            //Validate Input
            if (cityID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("cityID");
            return (_DatabaseContext.Cities.FirstOrDefault(city => city.CityID == cityID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<City> GetAllCities()
        {
            return _DatabaseContext.Cities.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<City> GetAllCitiesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "CityID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from cityList in 
                        _DatabaseContext.Cities
                        .DynamicOrderBy(orderBy)
                    select cityList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllCities(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Cities.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewCity(City newCity)
        {
            // Validate Parameters 
            if (newCity == null)
                throw (new ArgumentNullException("newCity"));

	        // Apply business rules
            OnCitySaving(newCity);
            OnCityCreating(newCity);

            _DatabaseContext.Cities.AddObject(newCity);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No city created!");

            // Apply business workflow
            OnCityCreated(newCity);
            OnCitySaved(newCity);

            return newCity.CityID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateCity(City updatedCity)
        {
            // Validate Parameters
            if (updatedCity == null)
                throw (new ArgumentNullException("updatedCity"));

            // Validate Primary key value
            if (updatedCity.CityID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("CityID");

            // Apply business rules
            OnCitySaving(updatedCity);
            OnCityUpdating(updatedCity);

            //attaching and making ready for parsistance
            if (updatedCity.EntityState == EntityState.Detached)
                _DatabaseContext.Cities.Attach(updatedCity);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedCity, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No city updated!");

            //Apply business workflow
            OnCityUpdated(updatedCity);
            OnCitySaved(updatedCity);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteCity(City cityToBeDeleted)
        {
            //Validate Input
            if (cityToBeDeleted == null)
                throw (new ArgumentNullException("cityToBeDeleted"));

            // Validate Primary key value
            if (cityToBeDeleted.CityID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("CityID");

            OnCitySaving(cityToBeDeleted);
            OnCityDeleting(cityToBeDeleted);

            if (cityToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Cities.Attach(cityToBeDeleted);
			_DatabaseContext.Cities.DeleteObject(cityToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No City deleted!");
            
            OnCityDeleted(cityToBeDeleted);
            OnCitySaved(cityToBeDeleted);

        }

        public void DeleteCities(List<int> cityIDsToDelete)
        {
            //Validate Input
            foreach (int cityID in cityIDsToDelete)
                if (cityID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("CityID");

            List<City> citysToBeDeleted = new List<City>();

            foreach (int cityID in cityIDsToDelete)
            {
                City city = new City { CityID = cityID };
                _DatabaseContext.Cities.Attach(city);
				_DatabaseContext.Cities.DeleteObject(city);
                citysToBeDeleted.Add(city);
                OnCityDeleting(city);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != cityIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more city records have not been deleted.");
            foreach (City cityToBeDeleted in citysToBeDeleted)
                OnCityDeleted(cityToBeDeleted);
        }

        #endregion
	
	}
}
