//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class TermsAndConditionBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public TermsAndConditionBLL() : this(new DatabaseContext()) { }

        public TermsAndConditionBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnTermsAndConditionSaving(TermsAndCondition termsAndCondition);

        partial void OnTermsAndConditionCreating(TermsAndCondition termsAndCondition);
        partial void OnTermsAndConditionCreated(TermsAndCondition termsAndCondition);

        partial void OnTermsAndConditionUpdating(TermsAndCondition termsAndCondition);
        partial void OnTermsAndConditionUpdated(TermsAndCondition termsAndCondition);

        partial void OnTermsAndConditionSaved(TermsAndCondition termsAndCondition);

        partial void OnTermsAndConditionDeleting(TermsAndCondition termsAndCondition);
        partial void OnTermsAndConditionDeleted(TermsAndCondition termsAndCondition);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public TermsAndCondition GetTermsAndConditionByTermsAndConditionsID(int termsAndConditionsID)
        {
            //Validate Input
            if (termsAndConditionsID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("termsAndConditionsID");
            return (_DatabaseContext.TermsAndConditions.FirstOrDefault(termsAndCondition => termsAndCondition.TermsAndConditionsID == termsAndConditionsID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TermsAndCondition> GetAllTermsAndConditions()
        {
            return _DatabaseContext.TermsAndConditions.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TermsAndCondition> GetAllTermsAndConditionsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TermsAndConditionsID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from termsAndConditionList in 
                        _DatabaseContext.TermsAndConditions
                        .DynamicOrderBy(orderBy)
                    select termsAndConditionList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTermsAndConditions(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.TermsAndConditions.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewTermsAndCondition(TermsAndCondition newTermsAndCondition)
        {
            // Validate Parameters 
            if (newTermsAndCondition == null)
                throw (new ArgumentNullException("newTermsAndCondition"));

	        // Apply business rules
            OnTermsAndConditionSaving(newTermsAndCondition);
            OnTermsAndConditionCreating(newTermsAndCondition);

            _DatabaseContext.TermsAndConditions.AddObject(newTermsAndCondition);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No termsAndCondition created!");

            // Apply business workflow
            OnTermsAndConditionCreated(newTermsAndCondition);
            OnTermsAndConditionSaved(newTermsAndCondition);

            return newTermsAndCondition.TermsAndConditionsID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateTermsAndCondition(TermsAndCondition updatedTermsAndCondition)
        {
            // Validate Parameters
            if (updatedTermsAndCondition == null)
                throw (new ArgumentNullException("updatedTermsAndCondition"));

            // Validate Primary key value
            if (updatedTermsAndCondition.TermsAndConditionsID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TermsAndConditionsID");

            // Apply business rules
            OnTermsAndConditionSaving(updatedTermsAndCondition);
            OnTermsAndConditionUpdating(updatedTermsAndCondition);

            //attaching and making ready for parsistance
            if (updatedTermsAndCondition.EntityState == EntityState.Detached)
                _DatabaseContext.TermsAndConditions.Attach(updatedTermsAndCondition);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedTermsAndCondition, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No termsAndCondition updated!");

            //Apply business workflow
            OnTermsAndConditionUpdated(updatedTermsAndCondition);
            OnTermsAndConditionSaved(updatedTermsAndCondition);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteTermsAndCondition(TermsAndCondition termsAndConditionToBeDeleted)
        {
            //Validate Input
            if (termsAndConditionToBeDeleted == null)
                throw (new ArgumentNullException("termsAndConditionToBeDeleted"));

            // Validate Primary key value
            if (termsAndConditionToBeDeleted.TermsAndConditionsID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TermsAndConditionsID");

            OnTermsAndConditionSaving(termsAndConditionToBeDeleted);
            OnTermsAndConditionDeleting(termsAndConditionToBeDeleted);

            if (termsAndConditionToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.TermsAndConditions.Attach(termsAndConditionToBeDeleted);
			_DatabaseContext.TermsAndConditions.DeleteObject(termsAndConditionToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No TermsAndCondition deleted!");
            
            OnTermsAndConditionDeleted(termsAndConditionToBeDeleted);
            OnTermsAndConditionSaved(termsAndConditionToBeDeleted);

        }

        public void DeleteTermsAndConditions(List<int> termsAndConditionsIDsToDelete)
        {
            //Validate Input
            foreach (int termsAndConditionsID in termsAndConditionsIDsToDelete)
                if (termsAndConditionsID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("TermsAndConditionsID");

            List<TermsAndCondition> termsAndConditionsToBeDeleted = new List<TermsAndCondition>();

            foreach (int termsAndConditionsID in termsAndConditionsIDsToDelete)
            {
                TermsAndCondition termsAndCondition = new TermsAndCondition { TermsAndConditionsID = termsAndConditionsID };
                _DatabaseContext.TermsAndConditions.Attach(termsAndCondition);
				_DatabaseContext.TermsAndConditions.DeleteObject(termsAndCondition);
                termsAndConditionsToBeDeleted.Add(termsAndCondition);
                OnTermsAndConditionDeleting(termsAndCondition);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != termsAndConditionsIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more termsAndCondition records have not been deleted.");
            foreach (TermsAndCondition termsAndConditionToBeDeleted in termsAndConditionsToBeDeleted)
                OnTermsAndConditionDeleted(termsAndConditionToBeDeleted);
        }

        #endregion
	
	}
}
