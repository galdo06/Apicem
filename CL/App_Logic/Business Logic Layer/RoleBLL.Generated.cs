//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class RoleBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public RoleBLL() : this(new DatabaseContext()) { }

        public RoleBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnRoleSaving(Role role);

        partial void OnRoleCreating(Role role);
        partial void OnRoleCreated(Role role);

        partial void OnRoleUpdating(Role role);
        partial void OnRoleUpdated(Role role);

        partial void OnRoleSaved(Role role);

        partial void OnRoleDeleting(Role role);
        partial void OnRoleDeleted(Role role);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Role GetRoleByRoleID(int roleID)
        {
            //Validate Input
            if (roleID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("roleID");
            return (_DatabaseContext.Roles.FirstOrDefault(role => role.RoleID == roleID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role> GetAllRoles()
        {
            return _DatabaseContext.Roles.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role> GetAllRolesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "RoleID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from roleList in 
                        _DatabaseContext.Roles
                        .DynamicOrderBy(orderBy)
                    select roleList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllRoles(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Roles.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewRole(Role newRole)
        {
            // Validate Parameters 
            if (newRole == null)
                throw (new ArgumentNullException("newRole"));

	        // Apply business rules
            OnRoleSaving(newRole);
            OnRoleCreating(newRole);

            _DatabaseContext.Roles.AddObject(newRole);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No role created!");

            // Apply business workflow
            OnRoleCreated(newRole);
            OnRoleSaved(newRole);

            return newRole.RoleID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateRole(Role updatedRole)
        {
            // Validate Parameters
            if (updatedRole == null)
                throw (new ArgumentNullException("updatedRole"));

            // Validate Primary key value
            if (updatedRole.RoleID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleID");

            // Apply business rules
            OnRoleSaving(updatedRole);
            OnRoleUpdating(updatedRole);

            //attaching and making ready for parsistance
            if (updatedRole.EntityState == EntityState.Detached)
                _DatabaseContext.Roles.Attach(updatedRole);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedRole, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No role updated!");

            //Apply business workflow
            OnRoleUpdated(updatedRole);
            OnRoleSaved(updatedRole);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteRole(Role roleToBeDeleted)
        {
            //Validate Input
            if (roleToBeDeleted == null)
                throw (new ArgumentNullException("roleToBeDeleted"));

            // Validate Primary key value
            if (roleToBeDeleted.RoleID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleID");

            OnRoleSaving(roleToBeDeleted);
            OnRoleDeleting(roleToBeDeleted);

            if (roleToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Roles.Attach(roleToBeDeleted);
			_DatabaseContext.Roles.DeleteObject(roleToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Role deleted!");
            
            OnRoleDeleted(roleToBeDeleted);
            OnRoleSaved(roleToBeDeleted);

        }

        public void DeleteRoles(List<int> roleIDsToDelete)
        {
            //Validate Input
            foreach (int roleID in roleIDsToDelete)
                if (roleID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleID");

            List<Role> rolesToBeDeleted = new List<Role>();

            foreach (int roleID in roleIDsToDelete)
            {
                Role role = new Role { RoleID = roleID };
                _DatabaseContext.Roles.Attach(role);
				_DatabaseContext.Roles.DeleteObject(role);
                rolesToBeDeleted.Add(role);
                OnRoleDeleting(role);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != roleIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more role records have not been deleted.");
            foreach (Role roleToBeDeleted in rolesToBeDeleted)
                OnRoleDeleted(roleToBeDeleted);
        }

        #endregion
	
	}
}
