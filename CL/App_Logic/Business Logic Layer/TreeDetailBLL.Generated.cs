//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class TreeDetailBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public TreeDetailBLL() : this(new DatabaseContext()) { }

        public TreeDetailBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnTreeDetailSaving(TreeDetail treeDetail);

        partial void OnTreeDetailCreating(TreeDetail treeDetail);
        partial void OnTreeDetailCreated(TreeDetail treeDetail);

        partial void OnTreeDetailUpdating(TreeDetail treeDetail);
        partial void OnTreeDetailUpdated(TreeDetail treeDetail);

        partial void OnTreeDetailSaved(TreeDetail treeDetail);

        partial void OnTreeDetailDeleting(TreeDetail treeDetail);
        partial void OnTreeDetailDeleted(TreeDetail treeDetail);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public TreeDetail GetTreeDetailByTreeDetailsID(int treeDetailsID)
        {
            //Validate Input
            if (treeDetailsID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("treeDetailsID");
            return (_DatabaseContext.TreeDetails.FirstOrDefault(treeDetail => treeDetail.TreeDetailsID == treeDetailsID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByActionProposedID(int? actionProposedID)
        {
            //Validate Input
            if (actionProposedID.IsEmpty())
                return GetAllTreeDetails();
 
            return (from treeDetail in _DatabaseContext.TreeDetails
                    where actionProposedID == null ? treeDetail.ActionProposedID == null : treeDetail.ActionProposedID == actionProposedID
                    select treeDetail).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByActionProposedIDPaged(int? actionProposedID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (actionProposedID.IsEmpty())
                return GetAllTreeDetailsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TreeDetailsID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from treeDetail in
                        _DatabaseContext.TreeDetails
                        .DynamicOrderBy(orderBy)
                    where actionProposedID == null ? treeDetail.ActionProposedID == null : treeDetail.ActionProposedID == actionProposedID
                    select treeDetail
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTreeDetailsByActionProposedID(int? actionProposedID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (actionProposedID.IsEmpty())
                return GetTotalCountForAllTreeDetails(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.TreeDetails.Count(treeDetail => actionProposedID == null ? treeDetail.ActionProposedID == null : treeDetail.ActionProposedID == actionProposedID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByConditionID(int? conditionID)
        {
            //Validate Input
            if (conditionID.IsEmpty())
                return GetAllTreeDetails();
 
            return (from treeDetail in _DatabaseContext.TreeDetails
                    where conditionID == null ? treeDetail.ConditionID == null : treeDetail.ConditionID == conditionID
                    select treeDetail).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByConditionIDPaged(int? conditionID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (conditionID.IsEmpty())
                return GetAllTreeDetailsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TreeDetailsID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from treeDetail in
                        _DatabaseContext.TreeDetails
                        .DynamicOrderBy(orderBy)
                    where conditionID == null ? treeDetail.ConditionID == null : treeDetail.ConditionID == conditionID
                    select treeDetail
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTreeDetailsByConditionID(int? conditionID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (conditionID.IsEmpty())
                return GetTotalCountForAllTreeDetails(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.TreeDetails.Count(treeDetail => conditionID == null ? treeDetail.ConditionID == null : treeDetail.ConditionID == conditionID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByProjectOrganismID(int projectOrganismID)
        {
            //Validate Input
            if (projectOrganismID.IsEmpty())
                return GetAllTreeDetails();
 
            return (from treeDetail in _DatabaseContext.TreeDetails
                    where projectOrganismID == null ? treeDetail.ProjectOrganismID == null : treeDetail.ProjectOrganismID == projectOrganismID
                    select treeDetail).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetTreeDetailsByProjectOrganismIDPaged(int projectOrganismID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectOrganismID.IsEmpty())
                return GetAllTreeDetailsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TreeDetailsID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from treeDetail in
                        _DatabaseContext.TreeDetails
                        .DynamicOrderBy(orderBy)
                    where projectOrganismID == null ? treeDetail.ProjectOrganismID == null : treeDetail.ProjectOrganismID == projectOrganismID
                    select treeDetail
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTreeDetailsByProjectOrganismID(int projectOrganismID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectOrganismID.IsEmpty())
                return GetTotalCountForAllTreeDetails(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.TreeDetails.Count(treeDetail => projectOrganismID == null ? treeDetail.ProjectOrganismID == null : treeDetail.ProjectOrganismID == projectOrganismID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetAllTreeDetails()
        {
            return _DatabaseContext.TreeDetails.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<TreeDetail> GetAllTreeDetailsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "TreeDetailsID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from treeDetailList in 
                        _DatabaseContext.TreeDetails
                        .DynamicOrderBy(orderBy)
                    select treeDetailList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllTreeDetails(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.TreeDetails.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewTreeDetail(TreeDetail newTreeDetail)
        {
            // Validate Parameters 
            if (newTreeDetail == null)
                throw (new ArgumentNullException("newTreeDetail"));

	        // Apply business rules
            OnTreeDetailSaving(newTreeDetail);
            OnTreeDetailCreating(newTreeDetail);

            _DatabaseContext.TreeDetails.AddObject(newTreeDetail);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No treeDetail created!");

            // Apply business workflow
            OnTreeDetailCreated(newTreeDetail);
            OnTreeDetailSaved(newTreeDetail);

            return newTreeDetail.TreeDetailsID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateTreeDetail(TreeDetail updatedTreeDetail)
        {
            // Validate Parameters
            if (updatedTreeDetail == null)
                throw (new ArgumentNullException("updatedTreeDetail"));

            // Validate Primary key value
            if (updatedTreeDetail.TreeDetailsID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TreeDetailsID");

            // Apply business rules
            OnTreeDetailSaving(updatedTreeDetail);
            OnTreeDetailUpdating(updatedTreeDetail);

            //attaching and making ready for parsistance
            if (updatedTreeDetail.EntityState == EntityState.Detached)
                _DatabaseContext.TreeDetails.Attach(updatedTreeDetail);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedTreeDetail, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No treeDetail updated!");

            //Apply business workflow
            OnTreeDetailUpdated(updatedTreeDetail);
            OnTreeDetailSaved(updatedTreeDetail);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteTreeDetail(TreeDetail treeDetailToBeDeleted)
        {
            //Validate Input
            if (treeDetailToBeDeleted == null)
                throw (new ArgumentNullException("treeDetailToBeDeleted"));

            // Validate Primary key value
            if (treeDetailToBeDeleted.TreeDetailsID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("TreeDetailsID");

            OnTreeDetailSaving(treeDetailToBeDeleted);
            OnTreeDetailDeleting(treeDetailToBeDeleted);

            if (treeDetailToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.TreeDetails.Attach(treeDetailToBeDeleted);
			_DatabaseContext.TreeDetails.DeleteObject(treeDetailToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No TreeDetail deleted!");
            
            OnTreeDetailDeleted(treeDetailToBeDeleted);
            OnTreeDetailSaved(treeDetailToBeDeleted);

        }

        public void DeleteTreeDetails(List<int> treeDetailsIDsToDelete)
        {
            //Validate Input
            foreach (int treeDetailsID in treeDetailsIDsToDelete)
                if (treeDetailsID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("TreeDetailsID");

            List<TreeDetail> treeDetailsToBeDeleted = new List<TreeDetail>();

            foreach (int treeDetailsID in treeDetailsIDsToDelete)
            {
                TreeDetail treeDetail = new TreeDetail { TreeDetailsID = treeDetailsID };
                _DatabaseContext.TreeDetails.Attach(treeDetail);
				_DatabaseContext.TreeDetails.DeleteObject(treeDetail);
                treeDetailsToBeDeleted.Add(treeDetail);
                OnTreeDetailDeleting(treeDetail);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != treeDetailsIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more treeDetail records have not been deleted.");
            foreach (TreeDetail treeDetailToBeDeleted in treeDetailsToBeDeleted)
                OnTreeDetailDeleted(treeDetailToBeDeleted);
        }

        #endregion
	
	}
}
