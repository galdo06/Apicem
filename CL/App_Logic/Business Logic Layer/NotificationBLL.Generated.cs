//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class NotificationBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public NotificationBLL() : this(new DatabaseContext()) { }

        public NotificationBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnNotificationSaving(Notification notification);

        partial void OnNotificationCreating(Notification notification);
        partial void OnNotificationCreated(Notification notification);

        partial void OnNotificationUpdating(Notification notification);
        partial void OnNotificationUpdated(Notification notification);

        partial void OnNotificationSaved(Notification notification);

        partial void OnNotificationDeleting(Notification notification);
        partial void OnNotificationDeleted(Notification notification);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Notification GetNotificationByNotificationID(int notificationID)
        {
            //Validate Input
            if (notificationID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("notificationID");
            return (_DatabaseContext.Notifications.FirstOrDefault(notification => notification.NotificationID == notificationID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Notification> GetAllNotifications()
        {
            return _DatabaseContext.Notifications.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Notification> GetAllNotificationsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "NotificationID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from notificationList in 
                        _DatabaseContext.Notifications
                        .DynamicOrderBy(orderBy)
                    select notificationList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllNotifications(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Notifications.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewNotification(Notification newNotification)
        {
            // Validate Parameters 
            if (newNotification == null)
                throw (new ArgumentNullException("newNotification"));

	        // Apply business rules
            OnNotificationSaving(newNotification);
            OnNotificationCreating(newNotification);

            _DatabaseContext.Notifications.AddObject(newNotification);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No notification created!");

            // Apply business workflow
            OnNotificationCreated(newNotification);
            OnNotificationSaved(newNotification);

            return newNotification.NotificationID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateNotification(Notification updatedNotification)
        {
            // Validate Parameters
            if (updatedNotification == null)
                throw (new ArgumentNullException("updatedNotification"));

            // Validate Primary key value
            if (updatedNotification.NotificationID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("NotificationID");

            // Apply business rules
            OnNotificationSaving(updatedNotification);
            OnNotificationUpdating(updatedNotification);

            //attaching and making ready for parsistance
            if (updatedNotification.EntityState == EntityState.Detached)
                _DatabaseContext.Notifications.Attach(updatedNotification);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedNotification, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No notification updated!");

            //Apply business workflow
            OnNotificationUpdated(updatedNotification);
            OnNotificationSaved(updatedNotification);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteNotification(Notification notificationToBeDeleted)
        {
            //Validate Input
            if (notificationToBeDeleted == null)
                throw (new ArgumentNullException("notificationToBeDeleted"));

            // Validate Primary key value
            if (notificationToBeDeleted.NotificationID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("NotificationID");

            OnNotificationSaving(notificationToBeDeleted);
            OnNotificationDeleting(notificationToBeDeleted);

            if (notificationToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Notifications.Attach(notificationToBeDeleted);
			_DatabaseContext.Notifications.DeleteObject(notificationToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Notification deleted!");
            
            OnNotificationDeleted(notificationToBeDeleted);
            OnNotificationSaved(notificationToBeDeleted);

        }

        public void DeleteNotifications(List<int> notificationIDsToDelete)
        {
            //Validate Input
            foreach (int notificationID in notificationIDsToDelete)
                if (notificationID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("NotificationID");

            List<Notification> notificationsToBeDeleted = new List<Notification>();

            foreach (int notificationID in notificationIDsToDelete)
            {
                Notification notification = new Notification { NotificationID = notificationID };
                _DatabaseContext.Notifications.Attach(notification);
				_DatabaseContext.Notifications.DeleteObject(notification);
                notificationsToBeDeleted.Add(notification);
                OnNotificationDeleting(notification);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != notificationIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more notification records have not been deleted.");
            foreach (Notification notificationToBeDeleted in notificationsToBeDeleted)
                OnNotificationDeleted(notificationToBeDeleted);
        }

        #endregion
	
	}
}
