//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class DeviceBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public DeviceBLL() : this(new DatabaseContext()) { }

        public DeviceBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnDeviceSaving(Device device);

        partial void OnDeviceCreating(Device device);
        partial void OnDeviceCreated(Device device);

        partial void OnDeviceUpdating(Device device);
        partial void OnDeviceUpdated(Device device);

        partial void OnDeviceSaved(Device device);

        partial void OnDeviceDeleting(Device device);
        partial void OnDeviceDeleted(Device device);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Device GetDeviceByDeviceID(int deviceID)
        {
            //Validate Input
            if (deviceID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("deviceID");
            return (_DatabaseContext.Devices.FirstOrDefault(device => device.DeviceID == deviceID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Device> GetAllDevices()
        {
            return _DatabaseContext.Devices.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Device> GetAllDevicesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "DeviceID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from deviceList in 
                        _DatabaseContext.Devices
                        .DynamicOrderBy(orderBy)
                    select deviceList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllDevices(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Devices.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewDevice(Device newDevice)
        {
            // Validate Parameters 
            if (newDevice == null)
                throw (new ArgumentNullException("newDevice"));

	        // Apply business rules
            OnDeviceSaving(newDevice);
            OnDeviceCreating(newDevice);

            _DatabaseContext.Devices.AddObject(newDevice);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No device created!");

            // Apply business workflow
            OnDeviceCreated(newDevice);
            OnDeviceSaved(newDevice);

            return newDevice.DeviceID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateDevice(Device updatedDevice)
        {
            // Validate Parameters
            if (updatedDevice == null)
                throw (new ArgumentNullException("updatedDevice"));

            // Validate Primary key value
            if (updatedDevice.DeviceID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("DeviceID");

            // Apply business rules
            OnDeviceSaving(updatedDevice);
            OnDeviceUpdating(updatedDevice);

            //attaching and making ready for parsistance
            if (updatedDevice.EntityState == EntityState.Detached)
                _DatabaseContext.Devices.Attach(updatedDevice);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedDevice, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No device updated!");

            //Apply business workflow
            OnDeviceUpdated(updatedDevice);
            OnDeviceSaved(updatedDevice);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteDevice(Device deviceToBeDeleted)
        {
            //Validate Input
            if (deviceToBeDeleted == null)
                throw (new ArgumentNullException("deviceToBeDeleted"));

            // Validate Primary key value
            if (deviceToBeDeleted.DeviceID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("DeviceID");

            OnDeviceSaving(deviceToBeDeleted);
            OnDeviceDeleting(deviceToBeDeleted);

            if (deviceToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Devices.Attach(deviceToBeDeleted);
			_DatabaseContext.Devices.DeleteObject(deviceToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Device deleted!");
            
            OnDeviceDeleted(deviceToBeDeleted);
            OnDeviceSaved(deviceToBeDeleted);

        }

        public void DeleteDevices(List<int> deviceIDsToDelete)
        {
            //Validate Input
            foreach (int deviceID in deviceIDsToDelete)
                if (deviceID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("DeviceID");

            List<Device> devicesToBeDeleted = new List<Device>();

            foreach (int deviceID in deviceIDsToDelete)
            {
                Device device = new Device { DeviceID = deviceID };
                _DatabaseContext.Devices.Attach(device);
				_DatabaseContext.Devices.DeleteObject(device);
                devicesToBeDeleted.Add(device);
                OnDeviceDeleting(device);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != deviceIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more device records have not been deleted.");
            foreach (Device deviceToBeDeleted in devicesToBeDeleted)
                OnDeviceDeleted(deviceToBeDeleted);
        }

        #endregion
	
	}
}
