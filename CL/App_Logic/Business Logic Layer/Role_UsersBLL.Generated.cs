//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class Role_UsersBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public Role_UsersBLL() : this(new DatabaseContext()) { }

        public Role_UsersBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnRole_UsersSaving(Role_Users role_Users);

        partial void OnRole_UsersCreating(Role_Users role_Users);
        partial void OnRole_UsersCreated(Role_Users role_Users);

        partial void OnRole_UsersUpdating(Role_Users role_Users);
        partial void OnRole_UsersUpdated(Role_Users role_Users);

        partial void OnRole_UsersSaved(Role_Users role_Users);

        partial void OnRole_UsersDeleting(Role_Users role_Users);
        partial void OnRole_UsersDeleted(Role_Users role_Users);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Role_Users GetRole_UsersByRoleUserID(int roleUserID)
        {
            //Validate Input
            if (roleUserID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("roleUserID");
            return (_DatabaseContext.Role_Users.FirstOrDefault(role_Users => role_Users.RoleUserID == roleUserID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetRole_UsersByRoleID(int roleID)
        {
            //Validate Input
            if (roleID.IsEmpty())
                return GetAllRole_Users();
 
            return (from role_Users in _DatabaseContext.Role_Users
                    where roleID == null ? role_Users.RoleID == null : role_Users.RoleID == roleID
                    select role_Users).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetRole_UsersByRoleIDPaged(int roleID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (roleID.IsEmpty())
                return GetAllRole_UsersPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "RoleUserID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from role_Users in
                        _DatabaseContext.Role_Users
                        .DynamicOrderBy(orderBy)
                    where roleID == null ? role_Users.RoleID == null : role_Users.RoleID == roleID
                    select role_Users
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllRole_UsersByRoleID(int roleID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (roleID.IsEmpty())
                return GetTotalCountForAllRole_Users(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Role_Users.Count(role_Users => roleID == null ? role_Users.RoleID == null : role_Users.RoleID == roleID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetRole_UsersByUserID(Guid userID)
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetAllRole_Users();
 
            return (from role_Users in _DatabaseContext.Role_Users
                    where userID == null ? role_Users.UserID == null : role_Users.UserID == userID
                    select role_Users).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetRole_UsersByUserIDPaged(Guid userID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetAllRole_UsersPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "RoleUserID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from role_Users in
                        _DatabaseContext.Role_Users
                        .DynamicOrderBy(orderBy)
                    where userID == null ? role_Users.UserID == null : role_Users.UserID == userID
                    select role_Users
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllRole_UsersByUserID(Guid userID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (userID.IsEmpty())
                return GetTotalCountForAllRole_Users(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Role_Users.Count(role_Users => userID == null ? role_Users.UserID == null : role_Users.UserID == userID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetAllRole_Users()
        {
            return _DatabaseContext.Role_Users.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Role_Users> GetAllRole_UsersPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "RoleUserID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from role_UsersList in 
                        _DatabaseContext.Role_Users
                        .DynamicOrderBy(orderBy)
                    select role_UsersList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllRole_Users(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Role_Users.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewRole_Users(Role_Users newRole_Users)
        {
            // Validate Parameters 
            if (newRole_Users == null)
                throw (new ArgumentNullException("newRole_Users"));

	        // Apply business rules
            OnRole_UsersSaving(newRole_Users);
            OnRole_UsersCreating(newRole_Users);

            _DatabaseContext.Role_Users.AddObject(newRole_Users);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No role_Users created!");

            // Apply business workflow
            OnRole_UsersCreated(newRole_Users);
            OnRole_UsersSaved(newRole_Users);

            return newRole_Users.RoleUserID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateRole_Users(Role_Users updatedRole_Users)
        {
            // Validate Parameters
            if (updatedRole_Users == null)
                throw (new ArgumentNullException("updatedRole_Users"));

            // Validate Primary key value
            if (updatedRole_Users.RoleUserID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleUserID");

            // Apply business rules
            OnRole_UsersSaving(updatedRole_Users);
            OnRole_UsersUpdating(updatedRole_Users);

            //attaching and making ready for parsistance
            if (updatedRole_Users.EntityState == EntityState.Detached)
                _DatabaseContext.Role_Users.Attach(updatedRole_Users);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedRole_Users, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No role_Users updated!");

            //Apply business workflow
            OnRole_UsersUpdated(updatedRole_Users);
            OnRole_UsersSaved(updatedRole_Users);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteRole_Users(Role_Users role_UsersToBeDeleted)
        {
            //Validate Input
            if (role_UsersToBeDeleted == null)
                throw (new ArgumentNullException("role_UsersToBeDeleted"));

            // Validate Primary key value
            if (role_UsersToBeDeleted.RoleUserID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleUserID");

            OnRole_UsersSaving(role_UsersToBeDeleted);
            OnRole_UsersDeleting(role_UsersToBeDeleted);

            if (role_UsersToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Role_Users.Attach(role_UsersToBeDeleted);
			_DatabaseContext.Role_Users.DeleteObject(role_UsersToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Role_Users deleted!");
            
            OnRole_UsersDeleted(role_UsersToBeDeleted);
            OnRole_UsersSaved(role_UsersToBeDeleted);

        }

        public void DeleteRole_Users(List<int> roleUserIDsToDelete)
        {
            //Validate Input
            foreach (int roleUserID in roleUserIDsToDelete)
                if (roleUserID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("RoleUserID");

            List<Role_Users> role_UserssToBeDeleted = new List<Role_Users>();

            foreach (int roleUserID in roleUserIDsToDelete)
            {
                Role_Users role_Users = new Role_Users { RoleUserID = roleUserID };
                _DatabaseContext.Role_Users.Attach(role_Users);
				_DatabaseContext.Role_Users.DeleteObject(role_Users);
                role_UserssToBeDeleted.Add(role_Users);
                OnRole_UsersDeleting(role_Users);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != roleUserIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more role_Users records have not been deleted.");
            foreach (Role_Users role_UsersToBeDeleted in role_UserssToBeDeleted)
                OnRole_UsersDeleted(role_UsersToBeDeleted);
        }

        #endregion
	
	}
}
