//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ScientificNameBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ScientificNameBLL() : this(new DatabaseContext()) { }

        public ScientificNameBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnScientificNameSaving(ScientificName scientificName);

        partial void OnScientificNameCreating(ScientificName scientificName);
        partial void OnScientificNameCreated(ScientificName scientificName);

        partial void OnScientificNameUpdating(ScientificName scientificName);
        partial void OnScientificNameUpdated(ScientificName scientificName);

        partial void OnScientificNameSaved(ScientificName scientificName);

        partial void OnScientificNameDeleting(ScientificName scientificName);
        partial void OnScientificNameDeleted(ScientificName scientificName);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public ScientificName GetScientificNameByScientificNameID(int scientificNameID)
        {
            //Validate Input
            if (scientificNameID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("scientificNameID");
            return (_DatabaseContext.ScientificNames.FirstOrDefault(scientificName => scientificName.ScientificNameID == scientificNameID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ScientificName> GetAllScientificNames()
        {
            return _DatabaseContext.ScientificNames.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ScientificName> GetAllScientificNamesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ScientificNameID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from scientificNameList in 
                        _DatabaseContext.ScientificNames
                        .DynamicOrderBy(orderBy)
                    select scientificNameList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllScientificNames(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.ScientificNames.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewScientificName(ScientificName newScientificName)
        {
            // Validate Parameters 
            if (newScientificName == null)
                throw (new ArgumentNullException("newScientificName"));

	        // Apply business rules
            OnScientificNameSaving(newScientificName);
            OnScientificNameCreating(newScientificName);

            _DatabaseContext.ScientificNames.AddObject(newScientificName);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No scientificName created!");

            // Apply business workflow
            OnScientificNameCreated(newScientificName);
            OnScientificNameSaved(newScientificName);

            return newScientificName.ScientificNameID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateScientificName(ScientificName updatedScientificName)
        {
            // Validate Parameters
            if (updatedScientificName == null)
                throw (new ArgumentNullException("updatedScientificName"));

            // Validate Primary key value
            if (updatedScientificName.ScientificNameID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ScientificNameID");

            // Apply business rules
            OnScientificNameSaving(updatedScientificName);
            OnScientificNameUpdating(updatedScientificName);

            //attaching and making ready for parsistance
            if (updatedScientificName.EntityState == EntityState.Detached)
                _DatabaseContext.ScientificNames.Attach(updatedScientificName);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedScientificName, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No scientificName updated!");

            //Apply business workflow
            OnScientificNameUpdated(updatedScientificName);
            OnScientificNameSaved(updatedScientificName);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteScientificName(ScientificName scientificNameToBeDeleted)
        {
            //Validate Input
            if (scientificNameToBeDeleted == null)
                throw (new ArgumentNullException("scientificNameToBeDeleted"));

            // Validate Primary key value
            if (scientificNameToBeDeleted.ScientificNameID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ScientificNameID");

            OnScientificNameSaving(scientificNameToBeDeleted);
            OnScientificNameDeleting(scientificNameToBeDeleted);

            if (scientificNameToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.ScientificNames.Attach(scientificNameToBeDeleted);
			_DatabaseContext.ScientificNames.DeleteObject(scientificNameToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No ScientificName deleted!");
            
            OnScientificNameDeleted(scientificNameToBeDeleted);
            OnScientificNameSaved(scientificNameToBeDeleted);

        }

        public void DeleteScientificNames(List<int> scientificNameIDsToDelete)
        {
            //Validate Input
            foreach (int scientificNameID in scientificNameIDsToDelete)
                if (scientificNameID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ScientificNameID");

            List<ScientificName> scientificNamesToBeDeleted = new List<ScientificName>();

            foreach (int scientificNameID in scientificNameIDsToDelete)
            {
                ScientificName scientificName = new ScientificName { ScientificNameID = scientificNameID };
                _DatabaseContext.ScientificNames.Attach(scientificName);
				_DatabaseContext.ScientificNames.DeleteObject(scientificName);
                scientificNamesToBeDeleted.Add(scientificName);
                OnScientificNameDeleting(scientificName);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != scientificNameIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more scientificName records have not been deleted.");
            foreach (ScientificName scientificNameToBeDeleted in scientificNamesToBeDeleted)
                OnScientificNameDeleted(scientificNameToBeDeleted);
        }

        #endregion
	
	}
}
