//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ColorBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ColorBLL() : this(new DatabaseContext()) { }

        public ColorBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnColorSaving(Color color);

        partial void OnColorCreating(Color color);
        partial void OnColorCreated(Color color);

        partial void OnColorUpdating(Color color);
        partial void OnColorUpdated(Color color);

        partial void OnColorSaved(Color color);

        partial void OnColorDeleting(Color color);
        partial void OnColorDeleted(Color color);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Color GetColorByColorID(int colorID)
        {
            //Validate Input
            if (colorID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("colorID");
            return (_DatabaseContext.Colors.FirstOrDefault(color => color.ColorID == colorID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Color> GetAllColors()
        {
            return _DatabaseContext.Colors.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Color> GetAllColorsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ColorID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from colorList in 
                        _DatabaseContext.Colors
                        .DynamicOrderBy(orderBy)
                    select colorList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllColors(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Colors.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewColor(Color newColor)
        {
            // Validate Parameters 
            if (newColor == null)
                throw (new ArgumentNullException("newColor"));

	        // Apply business rules
            OnColorSaving(newColor);
            OnColorCreating(newColor);

            _DatabaseContext.Colors.AddObject(newColor);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No color created!");

            // Apply business workflow
            OnColorCreated(newColor);
            OnColorSaved(newColor);

            return newColor.ColorID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateColor(Color updatedColor)
        {
            // Validate Parameters
            if (updatedColor == null)
                throw (new ArgumentNullException("updatedColor"));

            // Validate Primary key value
            if (updatedColor.ColorID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ColorID");

            // Apply business rules
            OnColorSaving(updatedColor);
            OnColorUpdating(updatedColor);

            //attaching and making ready for parsistance
            if (updatedColor.EntityState == EntityState.Detached)
                _DatabaseContext.Colors.Attach(updatedColor);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedColor, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No color updated!");

            //Apply business workflow
            OnColorUpdated(updatedColor);
            OnColorSaved(updatedColor);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteColor(Color colorToBeDeleted)
        {
            //Validate Input
            if (colorToBeDeleted == null)
                throw (new ArgumentNullException("colorToBeDeleted"));

            // Validate Primary key value
            if (colorToBeDeleted.ColorID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ColorID");

            OnColorSaving(colorToBeDeleted);
            OnColorDeleting(colorToBeDeleted);

            if (colorToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Colors.Attach(colorToBeDeleted);
			_DatabaseContext.Colors.DeleteObject(colorToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Color deleted!");
            
            OnColorDeleted(colorToBeDeleted);
            OnColorSaved(colorToBeDeleted);

        }

        public void DeleteColors(List<int> colorIDsToDelete)
        {
            //Validate Input
            foreach (int colorID in colorIDsToDelete)
                if (colorID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ColorID");

            List<Color> colorsToBeDeleted = new List<Color>();

            foreach (int colorID in colorIDsToDelete)
            {
                Color color = new Color { ColorID = colorID };
                _DatabaseContext.Colors.Attach(color);
				_DatabaseContext.Colors.DeleteObject(color);
                colorsToBeDeleted.Add(color);
                OnColorDeleting(color);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != colorIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more color records have not been deleted.");
            foreach (Color colorToBeDeleted in colorsToBeDeleted)
                OnColorDeleted(colorToBeDeleted);
        }

        #endregion
	
	}
}
