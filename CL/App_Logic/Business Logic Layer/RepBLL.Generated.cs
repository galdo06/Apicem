//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class RepBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public RepBLL() : this(new DatabaseContext()) { }

        public RepBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnRepSaving(Rep rep);

        partial void OnRepCreating(Rep rep);
        partial void OnRepCreated(Rep rep);

        partial void OnRepUpdating(Rep rep);
        partial void OnRepUpdated(Rep rep);

        partial void OnRepSaved(Rep rep);

        partial void OnRepDeleting(Rep rep);
        partial void OnRepDeleted(Rep rep);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Rep GetRepByRepID(int repID)
        {
            //Validate Input
            if (repID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("repID");
            return (_DatabaseContext.Reps.FirstOrDefault(rep => rep.RepID == repID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Rep> GetAllReps()
        {
            return _DatabaseContext.Reps.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Rep> GetAllRepsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "RepID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from repList in 
                        _DatabaseContext.Reps
                        .DynamicOrderBy(orderBy)
                    select repList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllReps(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Reps.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewRep(Rep newRep)
        {
            // Validate Parameters 
            if (newRep == null)
                throw (new ArgumentNullException("newRep"));

	        // Apply business rules
            OnRepSaving(newRep);
            OnRepCreating(newRep);

            _DatabaseContext.Reps.AddObject(newRep);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No rep created!");

            // Apply business workflow
            OnRepCreated(newRep);
            OnRepSaved(newRep);

            return newRep.RepID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateRep(Rep updatedRep)
        {
            // Validate Parameters
            if (updatedRep == null)
                throw (new ArgumentNullException("updatedRep"));

            // Validate Primary key value
            if (updatedRep.RepID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RepID");

            // Apply business rules
            OnRepSaving(updatedRep);
            OnRepUpdating(updatedRep);

            //attaching and making ready for parsistance
            if (updatedRep.EntityState == EntityState.Detached)
                _DatabaseContext.Reps.Attach(updatedRep);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedRep, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No rep updated!");

            //Apply business workflow
            OnRepUpdated(updatedRep);
            OnRepSaved(updatedRep);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteRep(Rep repToBeDeleted)
        {
            //Validate Input
            if (repToBeDeleted == null)
                throw (new ArgumentNullException("repToBeDeleted"));

            // Validate Primary key value
            if (repToBeDeleted.RepID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("RepID");

            OnRepSaving(repToBeDeleted);
            OnRepDeleting(repToBeDeleted);

            if (repToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Reps.Attach(repToBeDeleted);
			_DatabaseContext.Reps.DeleteObject(repToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Rep deleted!");
            
            OnRepDeleted(repToBeDeleted);
            OnRepSaved(repToBeDeleted);

        }

        public void DeleteReps(List<int> repIDsToDelete)
        {
            //Validate Input
            foreach (int repID in repIDsToDelete)
                if (repID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("RepID");

            List<Rep> repsToBeDeleted = new List<Rep>();

            foreach (int repID in repIDsToDelete)
            {
                Rep rep = new Rep { RepID = repID };
                _DatabaseContext.Reps.Attach(rep);
				_DatabaseContext.Reps.DeleteObject(rep);
                repsToBeDeleted.Add(rep);
                OnRepDeleting(rep);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != repIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more rep records have not been deleted.");
            foreach (Rep repToBeDeleted in repsToBeDeleted)
                OnRepDeleted(repToBeDeleted);
        }

        #endregion
	
	}
}
