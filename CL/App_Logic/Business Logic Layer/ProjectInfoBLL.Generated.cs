//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ProjectInfoBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ProjectInfoBLL() : this(new DatabaseContext()) { }

        public ProjectInfoBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnProjectInfoSaving(ProjectInfo projectInfo);

        partial void OnProjectInfoCreating(ProjectInfo projectInfo);
        partial void OnProjectInfoCreated(ProjectInfo projectInfo);

        partial void OnProjectInfoUpdating(ProjectInfo projectInfo);
        partial void OnProjectInfoUpdated(ProjectInfo projectInfo);

        partial void OnProjectInfoSaved(ProjectInfo projectInfo);

        partial void OnProjectInfoDeleting(ProjectInfo projectInfo);
        partial void OnProjectInfoDeleted(ProjectInfo projectInfo);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public ProjectInfo GetProjectInfoByProjectInfoID(int projectInfoID)
        {
            //Validate Input
            if (projectInfoID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("projectInfoID");
            return (_DatabaseContext.ProjectInfoes.FirstOrDefault(projectInfo => projectInfo.ProjectInfoID == projectInfoID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetProjectInfoesByCityID(int? cityID)
        {
            //Validate Input
            if (cityID.IsEmpty())
                return GetAllProjectInfoes();
 
            return (from projectInfo in _DatabaseContext.ProjectInfoes
                    where cityID == null ? projectInfo.CityID == null : projectInfo.CityID == cityID
                    select projectInfo).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetProjectInfoesByCityIDPaged(int? cityID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (cityID.IsEmpty())
                return GetAllProjectInfoesPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectInfoID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from projectInfo in
                        _DatabaseContext.ProjectInfoes
                        .DynamicOrderBy(orderBy)
                    where cityID == null ? projectInfo.CityID == null : projectInfo.CityID == cityID
                    select projectInfo
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProjectInfoesByCityID(int? cityID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (cityID.IsEmpty())
                return GetTotalCountForAllProjectInfoes(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.ProjectInfoes.Count(projectInfo => cityID == null ? projectInfo.CityID == null : projectInfo.CityID == cityID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetProjectInfoesByProjectID(int projectID)
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllProjectInfoes();
 
            return (from projectInfo in _DatabaseContext.ProjectInfoes
                    where projectID == null ? projectInfo.ProjectID == null : projectInfo.ProjectID == projectID
                    select projectInfo).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetProjectInfoesByProjectIDPaged(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllProjectInfoesPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectInfoID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from projectInfo in
                        _DatabaseContext.ProjectInfoes
                        .DynamicOrderBy(orderBy)
                    where projectID == null ? projectInfo.ProjectID == null : projectInfo.ProjectID == projectID
                    select projectInfo
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProjectInfoesByProjectID(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetTotalCountForAllProjectInfoes(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.ProjectInfoes.Count(projectInfo => projectID == null ? projectInfo.ProjectID == null : projectInfo.ProjectID == projectID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetAllProjectInfoes()
        {
            return _DatabaseContext.ProjectInfoes.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<ProjectInfo> GetAllProjectInfoesPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectInfoID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from projectInfoList in 
                        _DatabaseContext.ProjectInfoes
                        .DynamicOrderBy(orderBy)
                    select projectInfoList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProjectInfoes(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.ProjectInfoes.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewProjectInfo(ProjectInfo newProjectInfo)
        {
            // Validate Parameters 
            if (newProjectInfo == null)
                throw (new ArgumentNullException("newProjectInfo"));

	        // Apply business rules
            OnProjectInfoSaving(newProjectInfo);
            OnProjectInfoCreating(newProjectInfo);

            _DatabaseContext.ProjectInfoes.AddObject(newProjectInfo);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No projectInfo created!");

            // Apply business workflow
            OnProjectInfoCreated(newProjectInfo);
            OnProjectInfoSaved(newProjectInfo);

            return newProjectInfo.ProjectInfoID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateProjectInfo(ProjectInfo updatedProjectInfo)
        {
            // Validate Parameters
            if (updatedProjectInfo == null)
                throw (new ArgumentNullException("updatedProjectInfo"));

            // Validate Primary key value
            if (updatedProjectInfo.ProjectInfoID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectInfoID");

            // Apply business rules
            OnProjectInfoSaving(updatedProjectInfo);
            OnProjectInfoUpdating(updatedProjectInfo);

            //attaching and making ready for parsistance
            if (updatedProjectInfo.EntityState == EntityState.Detached)
                _DatabaseContext.ProjectInfoes.Attach(updatedProjectInfo);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedProjectInfo, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No projectInfo updated!");

            //Apply business workflow
            OnProjectInfoUpdated(updatedProjectInfo);
            OnProjectInfoSaved(updatedProjectInfo);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteProjectInfo(ProjectInfo projectInfoToBeDeleted)
        {
            //Validate Input
            if (projectInfoToBeDeleted == null)
                throw (new ArgumentNullException("projectInfoToBeDeleted"));

            // Validate Primary key value
            if (projectInfoToBeDeleted.ProjectInfoID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectInfoID");

            OnProjectInfoSaving(projectInfoToBeDeleted);
            OnProjectInfoDeleting(projectInfoToBeDeleted);

            if (projectInfoToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.ProjectInfoes.Attach(projectInfoToBeDeleted);
			_DatabaseContext.ProjectInfoes.DeleteObject(projectInfoToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No ProjectInfo deleted!");
            
            OnProjectInfoDeleted(projectInfoToBeDeleted);
            OnProjectInfoSaved(projectInfoToBeDeleted);

        }

        public void DeleteProjectInfoes(List<int> projectInfoIDsToDelete)
        {
            //Validate Input
            foreach (int projectInfoID in projectInfoIDsToDelete)
                if (projectInfoID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectInfoID");

            List<ProjectInfo> projectInfosToBeDeleted = new List<ProjectInfo>();

            foreach (int projectInfoID in projectInfoIDsToDelete)
            {
                ProjectInfo projectInfo = new ProjectInfo { ProjectInfoID = projectInfoID };
                _DatabaseContext.ProjectInfoes.Attach(projectInfo);
				_DatabaseContext.ProjectInfoes.DeleteObject(projectInfo);
                projectInfosToBeDeleted.Add(projectInfo);
                OnProjectInfoDeleting(projectInfo);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != projectInfoIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more projectInfo records have not been deleted.");
            foreach (ProjectInfo projectInfoToBeDeleted in projectInfosToBeDeleted)
                OnProjectInfoDeleted(projectInfoToBeDeleted);
        }

        #endregion
	
	}
}
