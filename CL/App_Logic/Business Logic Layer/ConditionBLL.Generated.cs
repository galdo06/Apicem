//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ConditionBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ConditionBLL() : this(new DatabaseContext()) { }

        public ConditionBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnConditionSaving(Condition condition);

        partial void OnConditionCreating(Condition condition);
        partial void OnConditionCreated(Condition condition);

        partial void OnConditionUpdating(Condition condition);
        partial void OnConditionUpdated(Condition condition);

        partial void OnConditionSaved(Condition condition);

        partial void OnConditionDeleting(Condition condition);
        partial void OnConditionDeleted(Condition condition);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Condition GetConditionByConditionID(int conditionID)
        {
            //Validate Input
            if (conditionID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("conditionID");
            return (_DatabaseContext.Conditions.FirstOrDefault(condition => condition.ConditionID == conditionID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Condition> GetAllConditions()
        {
            return _DatabaseContext.Conditions.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Condition> GetAllConditionsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ConditionID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from conditionList in 
                        _DatabaseContext.Conditions
                        .DynamicOrderBy(orderBy)
                    select conditionList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllConditions(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Conditions.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewCondition(Condition newCondition)
        {
            // Validate Parameters 
            if (newCondition == null)
                throw (new ArgumentNullException("newCondition"));

	        // Apply business rules
            OnConditionSaving(newCondition);
            OnConditionCreating(newCondition);

            _DatabaseContext.Conditions.AddObject(newCondition);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No condition created!");

            // Apply business workflow
            OnConditionCreated(newCondition);
            OnConditionSaved(newCondition);

            return newCondition.ConditionID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateCondition(Condition updatedCondition)
        {
            // Validate Parameters
            if (updatedCondition == null)
                throw (new ArgumentNullException("updatedCondition"));

            // Validate Primary key value
            if (updatedCondition.ConditionID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ConditionID");

            // Apply business rules
            OnConditionSaving(updatedCondition);
            OnConditionUpdating(updatedCondition);

            //attaching and making ready for parsistance
            if (updatedCondition.EntityState == EntityState.Detached)
                _DatabaseContext.Conditions.Attach(updatedCondition);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedCondition, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No condition updated!");

            //Apply business workflow
            OnConditionUpdated(updatedCondition);
            OnConditionSaved(updatedCondition);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteCondition(Condition conditionToBeDeleted)
        {
            //Validate Input
            if (conditionToBeDeleted == null)
                throw (new ArgumentNullException("conditionToBeDeleted"));

            // Validate Primary key value
            if (conditionToBeDeleted.ConditionID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ConditionID");

            OnConditionSaving(conditionToBeDeleted);
            OnConditionDeleting(conditionToBeDeleted);

            if (conditionToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Conditions.Attach(conditionToBeDeleted);
			_DatabaseContext.Conditions.DeleteObject(conditionToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Condition deleted!");
            
            OnConditionDeleted(conditionToBeDeleted);
            OnConditionSaved(conditionToBeDeleted);

        }

        public void DeleteConditions(List<int> conditionIDsToDelete)
        {
            //Validate Input
            foreach (int conditionID in conditionIDsToDelete)
                if (conditionID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ConditionID");

            List<Condition> conditionsToBeDeleted = new List<Condition>();

            foreach (int conditionID in conditionIDsToDelete)
            {
                Condition condition = new Condition { ConditionID = conditionID };
                _DatabaseContext.Conditions.Attach(condition);
				_DatabaseContext.Conditions.DeleteObject(condition);
                conditionsToBeDeleted.Add(condition);
                OnConditionDeleting(condition);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != conditionIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more condition records have not been deleted.");
            foreach (Condition conditionToBeDeleted in conditionsToBeDeleted)
                OnConditionDeleted(conditionToBeDeleted);
        }

        #endregion
	
	}
}
