//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class Application_GroupsBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public Application_GroupsBLL() : this(new DatabaseContext()) { }

        public Application_GroupsBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnApplication_GroupsSaving(Application_Groups application_Groups);

        partial void OnApplication_GroupsCreating(Application_Groups application_Groups);
        partial void OnApplication_GroupsCreated(Application_Groups application_Groups);

        partial void OnApplication_GroupsUpdating(Application_Groups application_Groups);
        partial void OnApplication_GroupsUpdated(Application_Groups application_Groups);

        partial void OnApplication_GroupsSaved(Application_Groups application_Groups);

        partial void OnApplication_GroupsDeleting(Application_Groups application_Groups);
        partial void OnApplication_GroupsDeleted(Application_Groups application_Groups);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Application_Groups GetApplication_GroupsByApplicationGroupID(int applicationGroupID)
        {
            //Validate Input
            if (applicationGroupID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("applicationGroupID");
            return (_DatabaseContext.Application_Groups.FirstOrDefault(application_Groups => application_Groups.ApplicationGroupID == applicationGroupID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetApplication_GroupsByApplicationID(int applicationID)
        {
            //Validate Input
            if (applicationID.IsEmpty())
                return GetAllApplication_Groups();
 
            return (from application_Groups in _DatabaseContext.Application_Groups
                    where applicationID == null ? application_Groups.ApplicationID == null : application_Groups.ApplicationID == applicationID
                    select application_Groups).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetApplication_GroupsByApplicationIDPaged(int applicationID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (applicationID.IsEmpty())
                return GetAllApplication_GroupsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ApplicationGroupID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from application_Groups in
                        _DatabaseContext.Application_Groups
                        .DynamicOrderBy(orderBy)
                    where applicationID == null ? application_Groups.ApplicationID == null : application_Groups.ApplicationID == applicationID
                    select application_Groups
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllApplication_GroupsByApplicationID(int applicationID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (applicationID.IsEmpty())
                return GetTotalCountForAllApplication_Groups(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Application_Groups.Count(application_Groups => applicationID == null ? application_Groups.ApplicationID == null : application_Groups.ApplicationID == applicationID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetApplication_GroupsByGroupID(int groupID)
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllApplication_Groups();
 
            return (from application_Groups in _DatabaseContext.Application_Groups
                    where groupID == null ? application_Groups.GroupID == null : application_Groups.GroupID == groupID
                    select application_Groups).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetApplication_GroupsByGroupIDPaged(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetAllApplication_GroupsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ApplicationGroupID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from application_Groups in
                        _DatabaseContext.Application_Groups
                        .DynamicOrderBy(orderBy)
                    where groupID == null ? application_Groups.GroupID == null : application_Groups.GroupID == groupID
                    select application_Groups
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllApplication_GroupsByGroupID(int groupID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (groupID.IsEmpty())
                return GetTotalCountForAllApplication_Groups(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Application_Groups.Count(application_Groups => groupID == null ? application_Groups.GroupID == null : application_Groups.GroupID == groupID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetAllApplication_Groups()
        {
            return _DatabaseContext.Application_Groups.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Application_Groups> GetAllApplication_GroupsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ApplicationGroupID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from application_GroupsList in 
                        _DatabaseContext.Application_Groups
                        .DynamicOrderBy(orderBy)
                    select application_GroupsList
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllApplication_Groups(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Application_Groups.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewApplication_Groups(Application_Groups newApplication_Groups)
        {
            // Validate Parameters 
            if (newApplication_Groups == null)
                throw (new ArgumentNullException("newApplication_Groups"));

	        // Apply business rules
            OnApplication_GroupsSaving(newApplication_Groups);
            OnApplication_GroupsCreating(newApplication_Groups);

            _DatabaseContext.Application_Groups.AddObject(newApplication_Groups);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No application_Groups created!");

            // Apply business workflow
            OnApplication_GroupsCreated(newApplication_Groups);
            OnApplication_GroupsSaved(newApplication_Groups);

            return newApplication_Groups.ApplicationGroupID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateApplication_Groups(Application_Groups updatedApplication_Groups)
        {
            // Validate Parameters
            if (updatedApplication_Groups == null)
                throw (new ArgumentNullException("updatedApplication_Groups"));

            // Validate Primary key value
            if (updatedApplication_Groups.ApplicationGroupID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationGroupID");

            // Apply business rules
            OnApplication_GroupsSaving(updatedApplication_Groups);
            OnApplication_GroupsUpdating(updatedApplication_Groups);

            //attaching and making ready for parsistance
            if (updatedApplication_Groups.EntityState == EntityState.Detached)
                _DatabaseContext.Application_Groups.Attach(updatedApplication_Groups);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedApplication_Groups, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No application_Groups updated!");

            //Apply business workflow
            OnApplication_GroupsUpdated(updatedApplication_Groups);
            OnApplication_GroupsSaved(updatedApplication_Groups);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteApplication_Groups(Application_Groups application_GroupsToBeDeleted)
        {
            //Validate Input
            if (application_GroupsToBeDeleted == null)
                throw (new ArgumentNullException("application_GroupsToBeDeleted"));

            // Validate Primary key value
            if (application_GroupsToBeDeleted.ApplicationGroupID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationGroupID");

            OnApplication_GroupsSaving(application_GroupsToBeDeleted);
            OnApplication_GroupsDeleting(application_GroupsToBeDeleted);

            if (application_GroupsToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Application_Groups.Attach(application_GroupsToBeDeleted);
			_DatabaseContext.Application_Groups.DeleteObject(application_GroupsToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Application_Groups deleted!");
            
            OnApplication_GroupsDeleted(application_GroupsToBeDeleted);
            OnApplication_GroupsSaved(application_GroupsToBeDeleted);

        }

        public void DeleteApplication_Groups(List<int> applicationGroupIDsToDelete)
        {
            //Validate Input
            foreach (int applicationGroupID in applicationGroupIDsToDelete)
                if (applicationGroupID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ApplicationGroupID");

            List<Application_Groups> application_GroupssToBeDeleted = new List<Application_Groups>();

            foreach (int applicationGroupID in applicationGroupIDsToDelete)
            {
                Application_Groups application_Groups = new Application_Groups { ApplicationGroupID = applicationGroupID };
                _DatabaseContext.Application_Groups.Attach(application_Groups);
				_DatabaseContext.Application_Groups.DeleteObject(application_Groups);
                application_GroupssToBeDeleted.Add(application_Groups);
                OnApplication_GroupsDeleting(application_Groups);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != applicationGroupIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more application_Groups records have not been deleted.");
            foreach (Application_Groups application_GroupsToBeDeleted in application_GroupssToBeDeleted)
                OnApplication_GroupsDeleted(application_GroupsToBeDeleted);
        }

        #endregion
	
	}
}
