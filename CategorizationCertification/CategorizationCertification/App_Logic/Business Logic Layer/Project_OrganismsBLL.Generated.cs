//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class Project_OrganismsBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public Project_OrganismsBLL() : this(new DatabaseContext()) { }

        public Project_OrganismsBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnProject_OrganismsSaving(Project_Organisms project_Organisms);

        partial void OnProject_OrganismsCreating(Project_Organisms project_Organisms);
        partial void OnProject_OrganismsCreated(Project_Organisms project_Organisms);

        partial void OnProject_OrganismsUpdating(Project_Organisms project_Organisms);
        partial void OnProject_OrganismsUpdated(Project_Organisms project_Organisms);

        partial void OnProject_OrganismsSaved(Project_Organisms project_Organisms);

        partial void OnProject_OrganismsDeleting(Project_Organisms project_Organisms);
        partial void OnProject_OrganismsDeleted(Project_Organisms project_Organisms);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Project_Organisms GetProject_OrganismsByProjectOrganismID(int projectOrganismID)
        {
            //Validate Input
            if (projectOrganismID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("projectOrganismID");
            return (_DatabaseContext.Project_Organisms.FirstOrDefault(project_Organisms => project_Organisms.ProjectOrganismID == projectOrganismID));
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetProject_OrganismsByOrganismID(int organismID)
        {
            //Validate Input
            if (organismID.IsEmpty())
                return GetAllProject_Organisms();
 
            return (from project_Organisms in _DatabaseContext.Project_Organisms
                    where organismID == null ? project_Organisms.OrganismID == null : project_Organisms.OrganismID == organismID
                    select project_Organisms).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetProject_OrganismsByOrganismIDPaged(int organismID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (organismID.IsEmpty())
                return GetAllProject_OrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectOrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from project_Organisms in
                        _DatabaseContext.Project_Organisms
                        .DynamicOrderBy(orderBy)
                    where organismID == null ? project_Organisms.OrganismID == null : project_Organisms.OrganismID == organismID
                    select project_Organisms
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProject_OrganismsByOrganismID(int organismID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (organismID.IsEmpty())
                return GetTotalCountForAllProject_Organisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Project_Organisms.Count(project_Organisms => organismID == null ? project_Organisms.OrganismID == null : project_Organisms.OrganismID == organismID);
        }
			
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetProject_OrganismsByProjectID(int projectID)
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllProject_Organisms();
 
            return (from project_Organisms in _DatabaseContext.Project_Organisms
                    where projectID == null ? project_Organisms.ProjectID == null : project_Organisms.ProjectID == projectID
                    select project_Organisms).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetProject_OrganismsByProjectIDPaged(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetAllProject_OrganismsPaged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectOrganismID";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from project_Organisms in
                        _DatabaseContext.Project_Organisms
                        .DynamicOrderBy(orderBy)
                    where projectID == null ? project_Organisms.ProjectID == null : project_Organisms.ProjectID == projectID
                    select project_Organisms
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProject_OrganismsByProjectID(int projectID, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (projectID.IsEmpty())
                return GetTotalCountForAllProject_Organisms(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.Project_Organisms.Count(project_Organisms => projectID == null ? project_Organisms.ProjectID == null : project_Organisms.ProjectID == projectID);
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetAllProject_Organisms()
        {
            return _DatabaseContext.Project_Organisms.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project_Organisms> GetAllProject_OrganismsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectOrganismID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from project_Organisms in 
                        _DatabaseContext.Project_Organisms
                        .DynamicOrderBy(orderBy)
                    select project_Organisms
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProject_Organisms(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Project_Organisms.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewProject_Organisms(Project_Organisms newProject_Organisms)
        {
            // Validate Parameters 
            if (newProject_Organisms == null)
                throw (new ArgumentNullException("newProject_Organisms"));

	        // Apply business rules
            OnProject_OrganismsSaving(newProject_Organisms);
            OnProject_OrganismsCreating(newProject_Organisms);

            _DatabaseContext.Project_Organisms.AddObject(newProject_Organisms);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No project_Organisms created!");

            // Apply business workflow
            OnProject_OrganismsCreated(newProject_Organisms);
            OnProject_OrganismsSaved(newProject_Organisms);

            return newProject_Organisms.ProjectOrganismID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateProject_Organisms(Project_Organisms updatedProject_Organisms)
        {
            // Validate Parameters
            if (updatedProject_Organisms == null)
                throw (new ArgumentNullException("updatedProject_Organisms"));

            // Validate Primary key value
            if (updatedProject_Organisms.ProjectOrganismID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectOrganismID");

            // Apply business rules
            OnProject_OrganismsSaving(updatedProject_Organisms);
            OnProject_OrganismsUpdating(updatedProject_Organisms);

            //attaching and making ready for parsistance
            if (updatedProject_Organisms.EntityState == EntityState.Detached)
                _DatabaseContext.Project_Organisms.Attach(updatedProject_Organisms);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedProject_Organisms, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No project_Organisms updated!");

            //Apply business workflow
            OnProject_OrganismsUpdated(updatedProject_Organisms);
            OnProject_OrganismsSaved(updatedProject_Organisms);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteProject_Organisms(Project_Organisms project_OrganismsToBeDeleted)
        {
            //Validate Input
            if (project_OrganismsToBeDeleted == null)
                throw (new ArgumentNullException("project_OrganismsToBeDeleted"));

            // Validate Primary key value
            if (project_OrganismsToBeDeleted.ProjectOrganismID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectOrganismID");

            OnProject_OrganismsSaving(project_OrganismsToBeDeleted);
            OnProject_OrganismsDeleting(project_OrganismsToBeDeleted);

            if (project_OrganismsToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Project_Organisms.Attach(project_OrganismsToBeDeleted);
			_DatabaseContext.Project_Organisms.DeleteObject(project_OrganismsToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Project_Organisms deleted!");
            
            OnProject_OrganismsDeleted(project_OrganismsToBeDeleted);
            OnProject_OrganismsSaved(project_OrganismsToBeDeleted);

        }

        public void DeleteProject_Organisms(List<int> projectOrganismIDsToDelete)
        {
            //Validate Input
            foreach (int projectOrganismID in projectOrganismIDsToDelete)
                if (projectOrganismID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectOrganismID");

            List<Project_Organisms> project_OrganismssToBeDeleted = new List<Project_Organisms>();

            foreach (int projectOrganismID in projectOrganismIDsToDelete)
            {
                Project_Organisms project_Organisms = new Project_Organisms { ProjectOrganismID = projectOrganismID };
                _DatabaseContext.Project_Organisms.Attach(project_Organisms);
				_DatabaseContext.Project_Organisms.DeleteObject(project_Organisms);
                project_OrganismssToBeDeleted.Add(project_Organisms);
                OnProject_OrganismsDeleting(project_Organisms);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != projectOrganismIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more project_Organisms records have not been deleted.");
            foreach (Project_Organisms project_OrganismsToBeDeleted in project_OrganismssToBeDeleted)
                OnProject_OrganismsDeleted(project_OrganismsToBeDeleted);
        }

        #endregion
	
	}
}
