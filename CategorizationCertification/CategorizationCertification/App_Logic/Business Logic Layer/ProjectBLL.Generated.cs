//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 â€“ 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	public partial class ProjectBLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public ProjectBLL() : this(new DatabaseContext()) { }

        public ProjectBLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void OnProjectSaving(Project project);

        partial void OnProjectCreating(Project project);
        partial void OnProjectCreated(Project project);

        partial void OnProjectUpdating(Project project);
        partial void OnProjectUpdated(Project project);

        partial void OnProjectSaved(Project project);

        partial void OnProjectDeleting(Project project);
        partial void OnProjectDeleted(Project project);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public Project GetProjectByProjectID(int projectID)
        {
            //Validate Input
            if (projectID.IsInvalidKey())
               BusinessLayerHelper.ThrowErrorForInvalidDataKey("projectID");
            return (_DatabaseContext.Projects.FirstOrDefault(project => project.ProjectID == projectID));
        }
			
				
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project> GetAllProjects()
        {
            return _DatabaseContext.Projects.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<Project> GetAllProjectsPaged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "ProjectID";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from project in 
                        _DatabaseContext.Projects
                        .DynamicOrderBy(orderBy)
                    select project
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAllProjects(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.Projects.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int CreateNewProject(Project newProject)
        {
            // Validate Parameters 
            if (newProject == null)
                throw (new ArgumentNullException("newProject"));

	        // Apply business rules
            OnProjectSaving(newProject);
            OnProjectCreating(newProject);

            _DatabaseContext.Projects.AddObject(newProject);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No project created!");

            // Apply business workflow
            OnProjectCreated(newProject);
            OnProjectSaved(newProject);

            return newProject.ProjectID;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void UpdateProject(Project updatedProject)
        {
            // Validate Parameters
            if (updatedProject == null)
                throw (new ArgumentNullException("updatedProject"));

            // Validate Primary key value
            if (updatedProject.ProjectID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectID");

            // Apply business rules
            OnProjectSaving(updatedProject);
            OnProjectUpdating(updatedProject);

            //attaching and making ready for parsistance
            if (updatedProject.EntityState == EntityState.Detached)
                _DatabaseContext.Projects.Attach(updatedProject);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updatedProject, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No project updated!");

            //Apply business workflow
            OnProjectUpdated(updatedProject);
            OnProjectSaved(updatedProject);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void DeleteProject(Project projectToBeDeleted)
        {
            //Validate Input
            if (projectToBeDeleted == null)
                throw (new ArgumentNullException("projectToBeDeleted"));

            // Validate Primary key value
            if (projectToBeDeleted.ProjectID.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectID");

            OnProjectSaving(projectToBeDeleted);
            OnProjectDeleting(projectToBeDeleted);

            if (projectToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.Projects.Attach(projectToBeDeleted);
			_DatabaseContext.Projects.DeleteObject(projectToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No Project deleted!");
            
            OnProjectDeleted(projectToBeDeleted);
            OnProjectSaved(projectToBeDeleted);

        }

        public void DeleteProjects(List<int> projectIDsToDelete)
        {
            //Validate Input
            foreach (int projectID in projectIDsToDelete)
                if (projectID.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectID");

            List<Project> projectsToBeDeleted = new List<Project>();

            foreach (int projectID in projectIDsToDelete)
            {
                Project project = new Project { ProjectID = projectID };
                _DatabaseContext.Projects.Attach(project);
				_DatabaseContext.Projects.DeleteObject(project);
                projectsToBeDeleted.Add(project);
                OnProjectDeleting(project);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != projectIDsToDelete.Count) 
                throw new DataNotUpdatedException("One or more project records have not been deleted.");
            foreach (Project projectToBeDeleted in projectsToBeDeleted)
                OnProjectDeleted(projectToBeDeleted);
        }

        #endregion
	
	}
}
