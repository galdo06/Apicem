//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//		Template updated by: Mohammad Ashraful Alam, Microsoft MVP, ASP.NET [admin@ashraful.net]
//		Modification comment: made few items mockable. (03-30-2010)
//			* Made ObjectSet properties of database context as virtual and return type as IObjectSet
//			* Made stored procedure (function import) methods virtual and return type as List<Entity>
//			* Seperate name space for data containers	
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections.Generic;//custom-code
using Eisk.Helpers;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model_Namespace", "FK_Organisms_OrganismTypes", "OrganismType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Eisk.BusinessEntities.OrganismType), "Organism", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Eisk.BusinessEntities.Organism), true)]//custom-code
[assembly: EdmRelationshipAttribute("Model_Namespace", "FK_ProjectOrganisms_Organisms", "Organism", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Eisk.BusinessEntities.Organism), "Project_Organisms", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Eisk.BusinessEntities.Project_Organisms), true)]//custom-code
[assembly: EdmRelationshipAttribute("Model_Namespace", "FK_ProjectOrganisms_Projects", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Eisk.BusinessEntities.Project), "Project_Organisms", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Eisk.BusinessEntities.Project_Organisms), true)]//custom-code

#endregion


namespace Eisk.BusinessEntities{//custom-code
#region Entities

/// <summary>
/// No Metadata Documentation available.
/// </summary>
[EdmEntityTypeAttribute(NamespaceName="Model_Namespace", Name="Organism")]
[Serializable()]
[DataContractAttribute(IsReference=true)]
public partial class Organism : EntityObject
{

	
    #region Factory Method

    /// <summary>
    /// Create a new Organism object.
    /// </summary>
    /// <param name="organismID">Initial value of the OrganismID property.</param>
    /// <param name="organismTypeID">Initial value of the OrganismTypeID property.</param>
    /// <param name="commonName">Initial value of the CommonName property.</param>
    /// <param name="scientificName">Initial value of the ScientificName property.</param>
    /// <param name="createdDate">Initial value of the CreatedDate property.</param>
    /// <param name="editedDate">Initial value of the EditedDate property.</param>
    public static Organism CreateOrganism(global::System.Int32 organismID, global::System.Int32 organismTypeID, global::System.String commonName, global::System.String scientificName, global::System.DateTime createdDate, global::System.DateTime editedDate)
    {
        Organism organism = new Organism();
        organism.OrganismID = organismID;
        organism.OrganismTypeID = organismTypeID;
        organism.CommonName = commonName;
        organism.ScientificName = scientificName;
        organism.CreatedDate = createdDate;
        organism.EditedDate = editedDate;
        return organism;
    }

    #endregion

    #region Primitive Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 OrganismID
    {
        get
        {
            return _OrganismID;
        }
        set
        {
            if (_OrganismID != value)
            {
                //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
    			if (value.IsInvalidKey()) BusinessLayerHelper.ThrowErrorForInvalidDataKey("OrganismID");
    
    
    			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
    			
    			OnOrganismIDChanging(value);
                ReportPropertyChanging("OrganismID");
                _OrganismID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrganismID");
                OnOrganismIDChanged();
            }
        }
    }
    private global::System.Int32 _OrganismID;
    partial void OnOrganismIDChanging(global::System.Int32 value);
    partial void OnOrganismIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 OrganismTypeID
    {
        get
        {
            return _OrganismTypeID;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("OrganismTypeID");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnOrganismTypeIDChanging(value);
            ReportPropertyChanging("OrganismTypeID");
            _OrganismTypeID = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("OrganismTypeID");
            OnOrganismTypeIDChanged();
        }
    }
    private global::System.Int32 _OrganismTypeID;
    partial void OnOrganismTypeIDChanging(global::System.Int32 value);
    partial void OnOrganismTypeIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.String CommonName
    {
        get
        {
            return _CommonName;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("CommonName");

			else if (value.IsNull()) BusinessLayerHelper.ThrowErrorForNullValue("CommonName");

			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnCommonNameChanging(value);
            ReportPropertyChanging("CommonName");
            _CommonName = StructuralObject.SetValidValue(value, false);
            ReportPropertyChanged("CommonName");
            OnCommonNameChanged();
        }
    }
    private global::System.String _CommonName;
    partial void OnCommonNameChanging(global::System.String value);
    partial void OnCommonNameChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.String ScientificName
    {
        get
        {
            return _ScientificName;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("ScientificName");

			else if (value.IsNull()) BusinessLayerHelper.ThrowErrorForNullValue("ScientificName");

			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnScientificNameChanging(value);
            ReportPropertyChanging("ScientificName");
            _ScientificName = StructuralObject.SetValidValue(value, false);
            ReportPropertyChanged("ScientificName");
            OnScientificNameChanged();
        }
    }
    private global::System.String _ScientificName;
    partial void OnScientificNameChanging(global::System.String value);
    partial void OnScientificNameChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime CreatedDate
    {
        get
        {
            return _CreatedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("CreatedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnCreatedDateChanging(value);
            ReportPropertyChanging("CreatedDate");
            _CreatedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("CreatedDate");
            OnCreatedDateChanged();
        }
    }
    private global::System.DateTime _CreatedDate;
    partial void OnCreatedDateChanging(global::System.DateTime value);
    partial void OnCreatedDateChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime EditedDate
    {
        get
        {
            return _EditedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("EditedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnEditedDateChanging(value);
            ReportPropertyChanging("EditedDate");
            _EditedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("EditedDate");
            OnEditedDateChanged();
        }
    }
    private global::System.DateTime _EditedDate;
    partial void OnEditedDateChanging(global::System.DateTime value);
    partial void OnEditedDateChanged();

    #endregion


    #region Navigation Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_Organisms_OrganismTypes", "OrganismType")]
    public OrganismType OrganismType
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganismType>("Model_Namespace.FK_Organisms_OrganismTypes", "OrganismType").Value;
        }
        set
        {
            ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganismType>("Model_Namespace.FK_Organisms_OrganismTypes", "OrganismType").Value = value;
        }
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [BrowsableAttribute(false)]
    [DataMemberAttribute()]
    public EntityReference<OrganismType> OrganismTypeReference
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganismType>("Model_Namespace.FK_Organisms_OrganismTypes", "OrganismType");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OrganismType>("Model_Namespace.FK_Organisms_OrganismTypes", "OrganismType", value);
            }
        }
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_ProjectOrganisms_Organisms", "Project_Organisms")]
    public EntityCollection<Project_Organisms> Project_Organisms
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project_Organisms>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Project_Organisms");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project_Organisms>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Project_Organisms", value);
            }
        }
    }

    #endregion

}

/// <summary>
/// No Metadata Documentation available.
/// </summary>
[EdmEntityTypeAttribute(NamespaceName="Model_Namespace", Name="OrganismType")]
[Serializable()]
[DataContractAttribute(IsReference=true)]
public partial class OrganismType : EntityObject
{

	
    #region Factory Method

    /// <summary>
    /// Create a new OrganismType object.
    /// </summary>
    /// <param name="organismTypeID">Initial value of the OrganismTypeID property.</param>
    /// <param name="organismTypeName">Initial value of the OrganismTypeName property.</param>
    /// <param name="createdDate">Initial value of the CreatedDate property.</param>
    /// <param name="editedDate">Initial value of the EditedDate property.</param>
    public static OrganismType CreateOrganismType(global::System.Int32 organismTypeID, global::System.String organismTypeName, global::System.DateTime createdDate, global::System.DateTime editedDate)
    {
        OrganismType organismType = new OrganismType();
        organismType.OrganismTypeID = organismTypeID;
        organismType.OrganismTypeName = organismTypeName;
        organismType.CreatedDate = createdDate;
        organismType.EditedDate = editedDate;
        return organismType;
    }

    #endregion

    #region Primitive Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 OrganismTypeID
    {
        get
        {
            return _OrganismTypeID;
        }
        set
        {
            if (_OrganismTypeID != value)
            {
                //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
    			if (value.IsInvalidKey()) BusinessLayerHelper.ThrowErrorForInvalidDataKey("OrganismTypeID");
    
    
    			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
    			
    			OnOrganismTypeIDChanging(value);
                ReportPropertyChanging("OrganismTypeID");
                _OrganismTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrganismTypeID");
                OnOrganismTypeIDChanged();
            }
        }
    }
    private global::System.Int32 _OrganismTypeID;
    partial void OnOrganismTypeIDChanging(global::System.Int32 value);
    partial void OnOrganismTypeIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.String OrganismTypeName
    {
        get
        {
            return _OrganismTypeName;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("OrganismTypeName");

			else if (value.IsNull()) BusinessLayerHelper.ThrowErrorForNullValue("OrganismTypeName");

			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnOrganismTypeNameChanging(value);
            ReportPropertyChanging("OrganismTypeName");
            _OrganismTypeName = StructuralObject.SetValidValue(value, false);
            ReportPropertyChanged("OrganismTypeName");
            OnOrganismTypeNameChanged();
        }
    }
    private global::System.String _OrganismTypeName;
    partial void OnOrganismTypeNameChanging(global::System.String value);
    partial void OnOrganismTypeNameChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime CreatedDate
    {
        get
        {
            return _CreatedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("CreatedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnCreatedDateChanging(value);
            ReportPropertyChanging("CreatedDate");
            _CreatedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("CreatedDate");
            OnCreatedDateChanged();
        }
    }
    private global::System.DateTime _CreatedDate;
    partial void OnCreatedDateChanging(global::System.DateTime value);
    partial void OnCreatedDateChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime EditedDate
    {
        get
        {
            return _EditedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("EditedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnEditedDateChanging(value);
            ReportPropertyChanging("EditedDate");
            _EditedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("EditedDate");
            OnEditedDateChanged();
        }
    }
    private global::System.DateTime _EditedDate;
    partial void OnEditedDateChanging(global::System.DateTime value);
    partial void OnEditedDateChanged();

    #endregion


    #region Navigation Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_Organisms_OrganismTypes", "Organism")]
    public EntityCollection<Organism> Organisms
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organism>("Model_Namespace.FK_Organisms_OrganismTypes", "Organism");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organism>("Model_Namespace.FK_Organisms_OrganismTypes", "Organism", value);
            }
        }
    }

    #endregion

}

/// <summary>
/// No Metadata Documentation available.
/// </summary>
[EdmEntityTypeAttribute(NamespaceName="Model_Namespace", Name="Project")]
[Serializable()]
[DataContractAttribute(IsReference=true)]
public partial class Project : EntityObject
{

	
    #region Factory Method

    /// <summary>
    /// Create a new Project object.
    /// </summary>
    /// <param name="projectID">Initial value of the ProjectID property.</param>
    /// <param name="projectName">Initial value of the ProjectName property.</param>
    /// <param name="createdDate">Initial value of the CreatedDate property.</param>
    /// <param name="editedDate">Initial value of the EditedDate property.</param>
    public static Project CreateProject(global::System.Int32 projectID, global::System.String projectName, global::System.DateTime createdDate, global::System.DateTime editedDate)
    {
        Project project = new Project();
        project.ProjectID = projectID;
        project.ProjectName = projectName;
        project.CreatedDate = createdDate;
        project.EditedDate = editedDate;
        return project;
    }

    #endregion

    #region Primitive Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 ProjectID
    {
        get
        {
            return _ProjectID;
        }
        set
        {
            if (_ProjectID != value)
            {
                //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
    			if (value.IsInvalidKey()) BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectID");
    
    
    			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
    			
    			OnProjectIDChanging(value);
                ReportPropertyChanging("ProjectID");
                _ProjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectID");
                OnProjectIDChanged();
            }
        }
    }
    private global::System.Int32 _ProjectID;
    partial void OnProjectIDChanging(global::System.Int32 value);
    partial void OnProjectIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.String ProjectName
    {
        get
        {
            return _ProjectName;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("ProjectName");

			else if (value.IsNull()) BusinessLayerHelper.ThrowErrorForNullValue("ProjectName");

			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnProjectNameChanging(value);
            ReportPropertyChanging("ProjectName");
            _ProjectName = StructuralObject.SetValidValue(value, false);
            ReportPropertyChanged("ProjectName");
            OnProjectNameChanged();
        }
    }
    private global::System.String _ProjectName;
    partial void OnProjectNameChanging(global::System.String value);
    partial void OnProjectNameChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime CreatedDate
    {
        get
        {
            return _CreatedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("CreatedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnCreatedDateChanging(value);
            ReportPropertyChanging("CreatedDate");
            _CreatedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("CreatedDate");
            OnCreatedDateChanged();
        }
    }
    private global::System.DateTime _CreatedDate;
    partial void OnCreatedDateChanging(global::System.DateTime value);
    partial void OnCreatedDateChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime EditedDate
    {
        get
        {
            return _EditedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("EditedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnEditedDateChanging(value);
            ReportPropertyChanging("EditedDate");
            _EditedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("EditedDate");
            OnEditedDateChanged();
        }
    }
    private global::System.DateTime _EditedDate;
    partial void OnEditedDateChanging(global::System.DateTime value);
    partial void OnEditedDateChanged();

    #endregion


    #region Navigation Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_ProjectOrganisms_Projects", "Project_Organisms")]
    public EntityCollection<Project_Organisms> Project_Organisms
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project_Organisms>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project_Organisms");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project_Organisms>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project_Organisms", value);
            }
        }
    }

    #endregion

}

/// <summary>
/// No Metadata Documentation available.
/// </summary>
[EdmEntityTypeAttribute(NamespaceName="Model_Namespace", Name="Project_Organisms")]
[Serializable()]
[DataContractAttribute(IsReference=true)]
public partial class Project_Organisms : EntityObject
{

	
    #region Factory Method

    /// <summary>
    /// Create a new Project_Organisms object.
    /// </summary>
    /// <param name="projectOrganismID">Initial value of the ProjectOrganismID property.</param>
    /// <param name="projectID">Initial value of the ProjectID property.</param>
    /// <param name="organismID">Initial value of the OrganismID property.</param>
    /// <param name="createdDate">Initial value of the CreatedDate property.</param>
    /// <param name="editedDate">Initial value of the EditedDate property.</param>
    public static Project_Organisms CreateProject_Organisms(global::System.Int32 projectOrganismID, global::System.Int32 projectID, global::System.Int32 organismID, global::System.DateTime createdDate, global::System.DateTime editedDate)
    {
        Project_Organisms project_Organisms = new Project_Organisms();
        project_Organisms.ProjectOrganismID = projectOrganismID;
        project_Organisms.ProjectID = projectID;
        project_Organisms.OrganismID = organismID;
        project_Organisms.CreatedDate = createdDate;
        project_Organisms.EditedDate = editedDate;
        return project_Organisms;
    }

    #endregion

    #region Primitive Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 ProjectOrganismID
    {
        get
        {
            return _ProjectOrganismID;
        }
        set
        {
            if (_ProjectOrganismID != value)
            {
                //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
    			if (value.IsInvalidKey()) BusinessLayerHelper.ThrowErrorForInvalidDataKey("ProjectOrganismID");
    
    
    			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
    			
    			OnProjectOrganismIDChanging(value);
                ReportPropertyChanging("ProjectOrganismID");
                _ProjectOrganismID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectOrganismID");
                OnProjectOrganismIDChanged();
            }
        }
    }
    private global::System.Int32 _ProjectOrganismID;
    partial void OnProjectOrganismIDChanging(global::System.Int32 value);
    partial void OnProjectOrganismIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 ProjectID
    {
        get
        {
            return _ProjectID;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("ProjectID");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnProjectIDChanging(value);
            ReportPropertyChanging("ProjectID");
            _ProjectID = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("ProjectID");
            OnProjectIDChanged();
        }
    }
    private global::System.Int32 _ProjectID;
    partial void OnProjectIDChanging(global::System.Int32 value);
    partial void OnProjectIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.Int32 OrganismID
    {
        get
        {
            return _OrganismID;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("OrganismID");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnOrganismIDChanging(value);
            ReportPropertyChanging("OrganismID");
            _OrganismID = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("OrganismID");
            OnOrganismIDChanged();
        }
    }
    private global::System.Int32 _OrganismID;
    partial void OnOrganismIDChanging(global::System.Int32 value);
    partial void OnOrganismIDChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime CreatedDate
    {
        get
        {
            return _CreatedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("CreatedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnCreatedDateChanging(value);
            ReportPropertyChanging("CreatedDate");
            _CreatedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("CreatedDate");
            OnCreatedDateChanged();
        }
    }
    private global::System.DateTime _CreatedDate;
    partial void OnCreatedDateChanging(global::System.DateTime value);
    partial void OnCreatedDateChanged();

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
    [DataMemberAttribute()]
    public global::System.DateTime EditedDate
    {
        get
        {
            return _EditedDate;
        }
        set
        {
            //-- Logic for Null and Empty Value Validation [CUSTOM CODE]
			
			if (value.IsEmpty()) BusinessLayerHelper.ThrowErrorForEmptyValue("EditedDate");


			//-- Logic for Null and Empty Value Validation Ends [CUSTOM CODE]
			
			OnEditedDateChanging(value);
            ReportPropertyChanging("EditedDate");
            _EditedDate = StructuralObject.SetValidValue(value);
            ReportPropertyChanged("EditedDate");
            OnEditedDateChanged();
        }
    }
    private global::System.DateTime _EditedDate;
    partial void OnEditedDateChanging(global::System.DateTime value);
    partial void OnEditedDateChanged();

    #endregion


    #region Navigation Properties

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_ProjectOrganisms_Organisms", "Organism")]
    public Organism Organism
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organism>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Organism").Value;
        }
        set
        {
            ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organism>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Organism").Value = value;
        }
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [BrowsableAttribute(false)]
    [DataMemberAttribute()]
    public EntityReference<Organism> OrganismReference
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organism>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Organism");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Organism>("Model_Namespace.FK_ProjectOrganisms_Organisms", "Organism", value);
            }
        }
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [XmlIgnoreAttribute()]
    [SoapIgnoreAttribute()]
    [DataMemberAttribute()]
    [EdmRelationshipNavigationPropertyAttribute("Model_Namespace", "FK_ProjectOrganisms_Projects", "Project")]
    public Project Project
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project").Value;
        }
        set
        {
            ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project").Value = value;
        }
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [BrowsableAttribute(false)]
    [DataMemberAttribute()]
    public EntityReference<Project> ProjectReference
    {
        get
        {
            return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project");
        }
        set
        {
            if ((value != null))
            {
                ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("Model_Namespace.FK_ProjectOrganisms_Projects", "Project", value);
            }
        }
    }

    #endregion

}

#endregion



}
